{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jyeo\\\\Desktop\\\\project\\\\Literacy-Improvement-Project\\\\Literacy-Improvement-Web\\\\frontend\\\\Literacy-Web\\\\src\\\\page\\\\Word.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { oneWordRequest, dictionaryWordsRequest } from \"../redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Button } from \"@material-ui/core\";\nimport { ToastContainer, toast, Flip } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(2)\n  },\n  padding: {\n    paddingBottom: theme.spacing(1)\n  },\n  paper: {\n    borderBottom: \"1px solid black\"\n  }\n}));\n\nfunction Word({\n  wordStatus,\n  oneWordRequest,\n  dictionaryWordsRequest\n}) {\n  _s();\n\n  useEffect(() => {\n    oneWordRequest(keyword);\n  }, []);\n  const {\n    keyword\n  } = useParams();\n  console.log(keyword);\n  let wordName = [];\n  let pronunciation = [];\n  let pos = [];\n  let sense = [];\n  const itemLoad = wordStatus.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: (wordName.push(item.word), pronunciation.push(item.pronunciation), pos.push(item.pos), sense.push(item.sense))\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this));\n  const classes = useStyles();\n\n  const handleClickDictionary = () => {\n    dictionaryWordsRequest(wordName[0]).then(() => {\n      toastAddToNoteSuccess();\n    });\n    console.log(wordName[0]);\n  };\n\n  const toastAddToNoteSuccess = () => toast(\"단어장에 추가되었습니다!\"); // 사용자에게 보여지는 부분\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [wordName[0], \" [\", pronunciation[0], \"]\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 7,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            variant: \"contained\",\n            onClick: handleClickDictionary,\n            children: \"\\uB098\\uB9CC\\uC758 \\uB2E8\\uC5B4\\uC7A5\\uC5D0 \\uCD94\\uAC00\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), wordName.map((word, index) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          className: classes.paper,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [wordName[index], \"[\", pronunciation[index], \"]\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: pos[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), sense[index].map((item, i) => /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: [i + 1, \".\", item.definition]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this))]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"top-center\",\n      autoClose: 2000,\n      hideProgressBar: true,\n      newestOnTop: false,\n      closeOnClick: true,\n      rtl: false,\n      pauseOnFocusLoss: true,\n      draggable: true,\n      pauseOnHover: true,\n      transition: Flip\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Word, \"w2KXWwrO6ISiD+0ql1GnjTekCnc=\", false, function () {\n  return [useParams, useStyles];\n});\n\n_c = Word;\n\nconst mapStateToProps = state => {\n  return {\n    wordStatus: state.oneWord.status.wordStatus\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    oneWordRequest: word => {\n      return dispatch(oneWordRequest(word));\n    },\n    dictionaryWordsRequest: word => {\n      return dispatch(dictionaryWordsRequest(word));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Word);\n\nvar _c;\n\n$RefreshReg$(_c, \"Word\");","map":{"version":3,"sources":["C:/Users/Jyeo/Desktop/project/Literacy-Improvement-Project/Literacy-Improvement-Web/frontend/Literacy-Web/src/page/Word.js"],"names":["React","useEffect","connect","useParams","oneWordRequest","dictionaryWordsRequest","makeStyles","Grid","Button","ToastContainer","toast","Flip","useStyles","theme","root","padding","spacing","paddingBottom","paper","borderBottom","Word","wordStatus","keyword","console","log","wordName","pronunciation","pos","sense","itemLoad","map","item","index","push","word","classes","handleClickDictionary","then","toastAddToNoteSuccess","i","definition","mapStateToProps","state","oneWord","status","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { oneWordRequest, dictionaryWordsRequest } from \"../redux\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nimport { ToastContainer, toast, Flip } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  padding: {\r\n    paddingBottom: theme.spacing(1),\r\n  },\r\n  paper: {\r\n    borderBottom: \"1px solid black\",\r\n  },\r\n}));\r\nfunction Word({ wordStatus, oneWordRequest, dictionaryWordsRequest }) {\r\n  useEffect(() => {\r\n    oneWordRequest(keyword);\r\n  }, []);\r\n  const { keyword } = useParams();\r\n  console.log(keyword);\r\n  let wordName = [];\r\n  let pronunciation = [];\r\n  let pos = [];\r\n  let sense = [];\r\n  const itemLoad = wordStatus.map((item, index) => (\r\n    <div key={index}>\r\n      {\r\n        (wordName.push(item.word),\r\n        pronunciation.push(item.pronunciation),\r\n        pos.push(item.pos),\r\n        sense.push(item.sense))\r\n      }\r\n    </div>\r\n  ));\r\n  const classes = useStyles();\r\n  const handleClickDictionary = () => {\r\n    dictionaryWordsRequest(wordName[0]).then(()=> {\r\n      toastAddToNoteSuccess()\r\n    });\r\n    console.log(wordName[0]);\r\n  };\r\n\r\n  const toastAddToNoteSuccess = () => toast(\"단어장에 추가되었습니다!\");\r\n\r\n  // 사용자에게 보여지는 부분\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={3}>\r\n            <h3>\r\n              {wordName[0]} [{pronunciation[0]}]\r\n            </h3>\r\n          </Grid>\r\n          <Grid item xs={2}></Grid>\r\n          <Grid item xs={7}>\r\n            <Button color=\"primary\" variant=\"contained\" onClick={handleClickDictionary}>나만의 단어장에 추가</Button>\r\n          </Grid>\r\n          {wordName.map((word, index) => (\r\n            <Grid item key={index} xs={12} className={classes.paper}>\r\n              <h4>\r\n                {wordName[index]}[{pronunciation[index]}]\r\n              </h4>\r\n              <h4>{pos[index]}</h4>\r\n              {sense[index].map((item, i) => (\r\n                <h5>\r\n                  {i + 1}.{item.definition}\r\n                </h5>\r\n              ))}\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </div>\r\n      <ToastContainer\r\n        position=\"top-center\"\r\n        autoClose={2000}\r\n        hideProgressBar\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        transition={Flip}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    wordStatus: state.oneWord.status.wordStatus,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    oneWordRequest: (word) => {\r\n      return dispatch(oneWordRequest(word));\r\n    },\r\n    dictionaryWordsRequest: (word) => {\r\n      return dispatch(dictionaryWordsRequest(word));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Word);\r\n"]},"metadata":{},"sourceType":"module"}