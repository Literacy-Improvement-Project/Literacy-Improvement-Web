{"ast":null,"code":"/**\n * @fileOverview Interface for Pusan National University spell checker.\n */\nconst request = require('request');\n\nconst Entities = require('html-entities').AllHtmlEntities;\n\nconst split = require('./split-string').byWordCount;\n\nconst entities = new Entities();\nconst {\n  decode\n} = entities; // Parses server response.\n\nfunction parseJSON(response) {\n  try {\n    return response.match(/\\tdata = \\[.*;/g).map(data => JSON.parse(data.substring(8, data.length - 1)))[0][0].errInfo.map(pnutypo => {\n      let suggestions = pnutypo.candWord.replace(/\\|$/, '');\n\n      if (suggestions === '') {\n        suggestions = decode(pnutypo.orgStr);\n      }\n\n      const info = pnutypo.help.replace(/< *[bB][rR] *\\/>/g, '\\n').replace(/\\n\\n/, '\\n').replace(/\\n\\(예\\) /, '\\n(예)\\n');\n      return {\n        token: decode(pnutypo.orgStr),\n        suggestions: decode(suggestions).split('|'),\n        info: decode(info)\n      };\n    });\n  } catch (err) {\n    if (response.indexOf('기술적 한계로 찾지 못한 맞춤법 오류나 문법  오류가 있을 수 있습니다.') !== -1) {\n      console.error('-- 한스펠 오류: 부산대 서비스가 유효하지 않은 양식을 반환했습니다.');\n    }\n  }\n\n  return [];\n}\n\nconst PNU_MAX_WORDS = 250;\nconst PNU_URL = 'http://speller.cs.pusan.ac.kr/results'; // Splits a long sentence, and makes spell check requests to the server.\n// `check` is called at each short sentence with the parsed JSON parameter.\n\nfunction spellCheck(sentence, timeout, check, end, error) {\n  if (sentence.length === 0) {\n    if (end !== null) {\n      end();\n    }\n\n    return;\n  } // Due to PNU server's weird behavior, replaces '\\n' to '\\n '.\n\n\n  const data = split(`${sentence.replace(/([^\\r])\\n/g, '$1\\r\\n')}\\r\\n`, PNU_MAX_WORDS);\n  let count = data.length;\n\n  const getResponse = (err, response, body) => {\n    if (!err && response.statusCode === 200) {\n      if (body.indexOf('<title>한국어 맞춤법/문법 검사기</title>') === -1) {\n        console.error(`-- 한스펠 오류: 부산대 서비스가 유효하지 않은 양식을 반환했습니다. (${PNU_URL})`);\n        if (error) error(err);\n      } else {\n        check(parseJSON(body));\n      }\n    } else {\n      console.error('-- 한스펠 오류: 부산대 서버의 접속 오류로 일부 문장 교정에 실패했습니다.');\n      if (error) error(err);\n    }\n\n    count -= 1;\n    if (count === 0 && end !== null) end();\n  };\n\n  data.forEach(part => request.post({\n    url: PNU_URL,\n    timeout,\n    form: {\n      text1: part\n    }\n  }, getResponse));\n}\n\nmodule.exports = spellCheck;","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Literacy-Improvement-Web/frontend/Literacy-Web/node_modules/hanspell/lib/pnu-spell-check.js"],"names":["request","require","Entities","AllHtmlEntities","split","byWordCount","entities","decode","parseJSON","response","match","map","data","JSON","parse","substring","length","errInfo","pnutypo","suggestions","candWord","replace","orgStr","info","help","token","err","indexOf","console","error","PNU_MAX_WORDS","PNU_URL","spellCheck","sentence","timeout","check","end","count","getResponse","body","statusCode","forEach","part","post","url","form","text1","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileOverview Interface for Pusan National University spell checker.\n */\n\nconst request = require('request');\nconst Entities = require('html-entities').AllHtmlEntities;\n\nconst split = require('./split-string').byWordCount;\n\nconst entities = new Entities();\nconst { decode } = entities;\n\n// Parses server response.\nfunction parseJSON(response) {\n  try {\n    return response\n      .match(/\\tdata = \\[.*;/g)\n      .map((data) => JSON.parse(data.substring(8, data.length - 1)))[0][0]\n      .errInfo.map((pnutypo) => {\n        let suggestions = pnutypo.candWord.replace(/\\|$/, '');\n        if (suggestions === '') {\n          suggestions = decode(pnutypo.orgStr);\n        }\n        const info = pnutypo.help\n          .replace(/< *[bB][rR] *\\/>/g, '\\n')\n          .replace(/\\n\\n/, '\\n')\n          .replace(/\\n\\(예\\) /, '\\n(예)\\n');\n\n        return {\n          token: decode(pnutypo.orgStr),\n          suggestions: decode(suggestions).split('|'),\n          info: decode(info),\n        };\n      });\n  } catch (err) {\n    if (\n      response.indexOf(\n        '기술적 한계로 찾지 못한 맞춤법 오류나 문법  오류가 있을 수 있습니다.',\n      ) !== -1\n    ) {\n      console.error(\n        '-- 한스펠 오류: 부산대 서비스가 유효하지 않은 양식을 반환했습니다.',\n      );\n    }\n  }\n\n  return [];\n}\n\nconst PNU_MAX_WORDS = 250;\nconst PNU_URL = 'http://speller.cs.pusan.ac.kr/results';\n\n// Splits a long sentence, and makes spell check requests to the server.\n// `check` is called at each short sentence with the parsed JSON parameter.\nfunction spellCheck(sentence, timeout, check, end, error) {\n  if (sentence.length === 0) {\n    if (end !== null) {\n      end();\n    }\n    return;\n  }\n\n  // Due to PNU server's weird behavior, replaces '\\n' to '\\n '.\n  const data = split(\n    `${sentence.replace(/([^\\r])\\n/g, '$1\\r\\n')}\\r\\n`,\n    PNU_MAX_WORDS,\n  );\n  let count = data.length;\n\n  const getResponse = (err, response, body) => {\n    if (!err && response.statusCode === 200) {\n      if (body.indexOf('<title>한국어 맞춤법/문법 검사기</title>') === -1) {\n        console.error(\n          `-- 한스펠 오류: 부산대 서비스가 유효하지 않은 양식을 반환했습니다. (${PNU_URL})`,\n        );\n        if (error) error(err);\n      } else {\n        check(parseJSON(body));\n      }\n    } else {\n      console.error(\n        '-- 한스펠 오류: 부산대 서버의 접속 오류로 일부 문장 교정에 실패했습니다.',\n      );\n      if (error) error(err);\n    }\n    count -= 1;\n    if (count === 0 && end !== null) end();\n  };\n\n  data.forEach((part) =>\n    request.post(\n      {\n        url: PNU_URL,\n        timeout,\n        form: {\n          text1: part,\n        },\n      },\n      getResponse,\n    ),\n  );\n}\n\nmodule.exports = spellCheck;\n"]},"metadata":{},"sourceType":"script"}