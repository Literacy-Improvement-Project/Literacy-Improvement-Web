{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheolsoon\\\\Desktop\\\\Literacy-Improvement-Web\\\\frontend\\\\Literacy-Web\\\\src\\\\components\\\\login\\\\OAuthRedirectHandler.js\",\n    _s = $RefreshSig$();\n\n// 리다이렉트될 화면\n// OAuthRedirectHandeler.js\nimport React, { useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\"; //import Spinner from \"./Spinner\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction OAuthRedirectHandler({}) {\n  _s();\n\n  const dispatch = useDispatch(); // 인가코드\n\n  let code = new URL(window.location.href).searchParams.get(\"code\");\n  console.log(code); // React.useEffect(async () => {\n  //   await dispatch(userActions.kakaoLogin(code));\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"hello kakao\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 10\n  }, this);\n}\n\n_s(OAuthRedirectHandler, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = OAuthRedirectHandler;\n\nconst mapStateToProps = state => {\n  return {\n    dailyWordsList: state.dailyWords.status.dailyWordsList,\n    isLoggedIn: state.authentication.status.isLoggedIn,\n    paraphraseResult: state.paraphrase.status.result,\n    wordStatus: state.oneWord.status.wordStatus,\n    paraphraseCheckValid: state.paraphrase.status.valid,\n    item: state.morpheme.status.item\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dailyWordsRequest: () => {\n      return dispatch(dailyWordsRequest());\n    },\n    oneWordRequest: word => {\n      return dispatch(oneWordRequest(word));\n    },\n    paraphraseCheckRequest: body => {\n      return dispatch(paraphraseCheckRequest(body));\n    },\n    morphemeCheckRequest: body => {\n      return dispatch(morphemeCheckRequest(body));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OAuthRedirectHandler);\n\nvar _c;\n\n$RefreshReg$(_c, \"OAuthRedirectHandler\");","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Literacy-Improvement-Web/frontend/Literacy-Web/src/components/login/OAuthRedirectHandler.js"],"names":["React","useState","connect","useSelector","useDispatch","OAuthRedirectHandler","dispatch","code","URL","window","location","href","searchParams","get","console","log","mapStateToProps","state","dailyWordsList","dailyWords","status","isLoggedIn","authentication","paraphraseResult","paraphrase","result","wordStatus","oneWord","paraphraseCheckValid","valid","item","morpheme","mapDispatchToProps","dailyWordsRequest","oneWordRequest","word","paraphraseCheckRequest","body","morphemeCheckRequest"],"mappings":";;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD,C,CAEA;;;;AAEA,SAASC,oBAAT,CAA8B,EAA9B,EAAkC;AAAA;;AAChC,QAAMC,QAAQ,GAAGF,WAAW,EAA5B,CADgC,CAGhC;;AACA,MAAIG,IAAI,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,QAAP,CAAgBC,IAAxB,EAA8BC,YAA9B,CAA2CC,GAA3C,CAA+C,MAA/C,CAAX;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ,EALgC,CAOhC;AACA;AACA;;AAEA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAZQF,oB;UACUD,W;;;KADVC,oB;;AAcT,MAAMW,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,cAAc,EAAED,KAAK,CAACE,UAAN,CAAiBC,MAAjB,CAAwBF,cADnC;AAELG,IAAAA,UAAU,EAAEJ,KAAK,CAACK,cAAN,CAAqBF,MAArB,CAA4BC,UAFnC;AAGLE,IAAAA,gBAAgB,EAAEN,KAAK,CAACO,UAAN,CAAiBJ,MAAjB,CAAwBK,MAHrC;AAILC,IAAAA,UAAU,EAAET,KAAK,CAACU,OAAN,CAAcP,MAAd,CAAqBM,UAJ5B;AAKLE,IAAAA,oBAAoB,EAAEX,KAAK,CAACO,UAAN,CAAiBJ,MAAjB,CAAwBS,KALzC;AAMLC,IAAAA,IAAI,EAAEb,KAAK,CAACc,QAAN,CAAeX,MAAf,CAAsBU;AANvB,GAAP;AAQD,CATD;;AAWA,MAAME,kBAAkB,GAAI1B,QAAD,IAAc;AACvC,SAAO;AACL2B,IAAAA,iBAAiB,EAAE,MAAM;AACvB,aAAO3B,QAAQ,CAAC2B,iBAAiB,EAAlB,CAAf;AACD,KAHI;AAILC,IAAAA,cAAc,EAAGC,IAAD,IAAU;AACxB,aAAO7B,QAAQ,CAAC4B,cAAc,CAACC,IAAD,CAAf,CAAf;AACD,KANI;AAOLC,IAAAA,sBAAsB,EAAGC,IAAD,IAAU;AAChC,aAAO/B,QAAQ,CAAC8B,sBAAsB,CAACC,IAAD,CAAvB,CAAf;AACD,KATI;AAULC,IAAAA,oBAAoB,EAAGD,IAAD,IAAU;AAC9B,aAAO/B,QAAQ,CAACgC,oBAAoB,CAACD,IAAD,CAArB,CAAf;AACD;AAZI,GAAP;AAcD,CAfD;;AAgBA,eAAenC,OAAO,CACpBc,eADoB,EAEpBgB,kBAFoB,CAAP,CAGb3B,oBAHa,CAAf","sourcesContent":["// 리다이렉트될 화면\r\n// OAuthRedirectHandeler.js\r\n\r\nimport React, { useState } from \"react\";\r\nimport { connect, useSelector, useDispatch } from \"react-redux\";\r\n\r\n//import Spinner from \"./Spinner\";\r\n\r\nfunction OAuthRedirectHandler({}) {\r\n  const dispatch = useDispatch();\r\n\r\n  // 인가코드\r\n  let code = new URL(window.location.href).searchParams.get(\"code\");\r\n  console.log(code);\r\n\r\n  // React.useEffect(async () => {\r\n  //   await dispatch(userActions.kakaoLogin(code));\r\n  // }, []);\r\n\r\n  return <div>hello kakao</div>;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dailyWordsList: state.dailyWords.status.dailyWordsList,\r\n    isLoggedIn: state.authentication.status.isLoggedIn,\r\n    paraphraseResult: state.paraphrase.status.result,\r\n    wordStatus: state.oneWord.status.wordStatus,\r\n    paraphraseCheckValid: state.paraphrase.status.valid,\r\n    item: state.morpheme.status.item,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dailyWordsRequest: () => {\r\n      return dispatch(dailyWordsRequest());\r\n    },\r\n    oneWordRequest: (word) => {\r\n      return dispatch(oneWordRequest(word));\r\n    },\r\n    paraphraseCheckRequest: (body) => {\r\n      return dispatch(paraphraseCheckRequest(body));\r\n    },\r\n    morphemeCheckRequest: (body) => {\r\n      return dispatch(morphemeCheckRequest(body));\r\n    },\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(OAuthRedirectHandler);\r\n"]},"metadata":{},"sourceType":"module"}