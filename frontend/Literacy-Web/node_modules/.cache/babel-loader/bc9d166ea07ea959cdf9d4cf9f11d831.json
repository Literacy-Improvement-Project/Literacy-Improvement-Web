{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheolsoon\\\\Desktop\\\\Literacy-Improvement-Web\\\\frontend\\\\Literacy-Web\\\\src\\\\page\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport MainWordOfTheDay from \"../components/MainWordOfTheDay\";\nimport MainWordMeaning from \"../components/WordMeaning/MainWordMeaning\";\nimport { dailyWordsRequest, oneWordRequest, paraphraseCheckRequest, morphemeCheckRequest } from \"../redux\";\nimport SentenceParaphrase from \"../components/SentenceParaphrase\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { ToastContainer, toast, Flip } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(2)\n  }\n}));\n\nfunction Main({\n  dailyWordsList,\n  wordStatus,\n  dailyWordsRequest,\n  oneWordRequest,\n  isLoggedIn,\n  paraphraseCheckRequest,\n  paraphraseResult,\n  paraphraseCheckValid,\n  morphemeCheckRequest,\n  item\n}) {\n  _s();\n\n  useEffect(() => {\n    // 렌더링\n    dailyWordsRequest();\n  }, []);\n  const classes = useStyles();\n  const paraphraseCheckResult = useSelector(state => state.paraphrase.status.result); // const handleOneWord = (word) => {\n  //   oneWordRequest(word);\n  //   console.log(word);\n  // };\n\n  const handleMorpheme = search => {\n    let body = {\n      analysisCode: \"ner\",\n      text: search\n    };\n    console.log(search);\n    morphemeCheckRequest(body);\n  };\n\n  const toastCheckParaphrase = () => toast(\"같은 의미입니다!\");\n\n  const toastCheckNonParaphrase = () => toast.error(\"다른 의미입니다. 다시 입력해 주세요.\");\n\n  const toastCheckParaphraseFailure = () => toast.error(\"확인 실패했습니다.\");\n\n  const onClickCheckParaphrase = body => {\n    paraphraseCheckRequest(body).then(() => {});\n  };\n\n  if (paraphraseCheckResult === \"paraphrase\") {\n    toastCheckParaphrase();\n  } else if (paraphraseCheckResult === \"not paraphrase\") {\n    toastCheckNonParaphrase();\n  } // 사용자에게 보여지는 부분\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 8,\n          children: /*#__PURE__*/_jsxDEV(MainWordOfTheDay, {\n            isLoggedIn: isLoggedIn,\n            dailyWordsList: dailyWordsList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(SentenceParaphrase, {\n            onClickCheckParaphrase: onClickCheckParaphrase,\n            paraphraseCheckValid: paraphraseCheckValid,\n            paraphraseResult: paraphraseResult\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(MainWordMeaning, {\n            handleMorpheme: handleMorpheme,\n            item: item\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"top-center\",\n      autoClose: 2000,\n      hideProgressBar: true,\n      newestOnTop: false,\n      closeOnClick: true,\n      rtl: false,\n      pauseOnFocusLoss: true,\n      draggable: true,\n      pauseOnHover: true,\n      transition: Flip\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"d3t3RKk6lJxzNvxFJU+tYHAeKQ8=\", false, function () {\n  return [useStyles, useSelector];\n});\n\n_c = Main;\n\nconst mapStateToProps = state => {\n  return {\n    dailyWordsList: state.dailyWords.status.dailyWordsList,\n    isLoggedIn: state.authentication.status.isLoggedIn,\n    paraphraseResult: state.paraphrase.status.result,\n    wordStatus: state.oneWord.status.wordStatus,\n    paraphraseCheckValid: state.paraphrase.status.valid,\n    item: state.morpheme.status.item\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dailyWordsRequest: () => {\n      return dispatch(dailyWordsRequest());\n    },\n    oneWordRequest: word => {\n      return dispatch(oneWordRequest(word));\n    },\n    paraphraseCheckRequest: body => {\n      return dispatch(paraphraseCheckRequest(body));\n    },\n    morphemeCheckRequest: body => {\n      return dispatch(morphemeCheckRequest(body));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Literacy-Improvement-Web/frontend/Literacy-Web/src/page/Main.js"],"names":["React","useEffect","useState","connect","useSelector","MainWordOfTheDay","MainWordMeaning","dailyWordsRequest","oneWordRequest","paraphraseCheckRequest","morphemeCheckRequest","SentenceParaphrase","makeStyles","Grid","ToastContainer","toast","Flip","useStyles","theme","root","padding","spacing","Main","dailyWordsList","wordStatus","isLoggedIn","paraphraseResult","paraphraseCheckValid","item","classes","paraphraseCheckResult","state","paraphrase","status","result","handleMorpheme","search","body","analysisCode","text","console","log","toastCheckParaphrase","toastCheckNonParaphrase","error","toastCheckParaphraseFailure","onClickCheckParaphrase","then","mapStateToProps","dailyWords","authentication","oneWord","valid","morpheme","mapDispatchToProps","dispatch","word"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { connect, useSelector } from \"react-redux\";\r\n\r\nimport MainWordOfTheDay from \"../components/MainWordOfTheDay\";\r\nimport MainWordMeaning from \"../components/WordMeaning/MainWordMeaning\";\r\nimport {\r\n  dailyWordsRequest,\r\n  oneWordRequest,\r\n  paraphraseCheckRequest,\r\n  morphemeCheckRequest,\r\n} from \"../redux\";\r\nimport SentenceParaphrase from \"../components/SentenceParaphrase\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport { ToastContainer, toast, Flip } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction Main({\r\n  dailyWordsList,\r\n  wordStatus,\r\n  dailyWordsRequest,\r\n  oneWordRequest,\r\n  isLoggedIn,\r\n  paraphraseCheckRequest,\r\n  paraphraseResult,\r\n  paraphraseCheckValid,\r\n  morphemeCheckRequest,\r\n  item,\r\n}) {\r\n  useEffect(() => {\r\n    // 렌더링\r\n    dailyWordsRequest();\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n  const paraphraseCheckResult = useSelector(\r\n    (state) => state.paraphrase.status.result\r\n  );\r\n\r\n  // const handleOneWord = (word) => {\r\n  //   oneWordRequest(word);\r\n  //   console.log(word);\r\n  // };\r\n\r\n  const handleMorpheme = (search) => {\r\n    let body = {\r\n      analysisCode: \"ner\",\r\n      text: search,\r\n    };\r\n    console.log(search);\r\n    morphemeCheckRequest(body);\r\n  };\r\n\r\n  const toastCheckParaphrase = () => toast(\"같은 의미입니다!\");\r\n  const toastCheckNonParaphrase = () =>\r\n    toast.error(\"다른 의미입니다. 다시 입력해 주세요.\");\r\n  const toastCheckParaphraseFailure = () => toast.error(\"확인 실패했습니다.\");\r\n\r\n  const onClickCheckParaphrase = (body) => {\r\n    paraphraseCheckRequest(body).then(() => {});\r\n  };\r\n\r\n  if (paraphraseCheckResult === \"paraphrase\") {\r\n    toastCheckParaphrase();\r\n  } else if (paraphraseCheckResult === \"not paraphrase\") {\r\n    toastCheckNonParaphrase();\r\n  }\r\n  // 사용자에게 보여지는 부분\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={8}>\r\n            <MainWordOfTheDay\r\n              isLoggedIn={isLoggedIn}\r\n              dailyWordsList={dailyWordsList}\r\n            ></MainWordOfTheDay>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <SentenceParaphrase\r\n              onClickCheckParaphrase={onClickCheckParaphrase}\r\n              paraphraseCheckValid={paraphraseCheckValid}\r\n              paraphraseResult={paraphraseResult}\r\n            ></SentenceParaphrase>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <MainWordMeaning\r\n              handleMorpheme={handleMorpheme}\r\n              item={item}\r\n            ></MainWordMeaning>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n      <ToastContainer\r\n        position=\"top-center\"\r\n        autoClose={2000}\r\n        hideProgressBar\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        transition={Flip}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dailyWordsList: state.dailyWords.status.dailyWordsList,\r\n    isLoggedIn: state.authentication.status.isLoggedIn,\r\n    paraphraseResult: state.paraphrase.status.result,\r\n    wordStatus: state.oneWord.status.wordStatus,\r\n    paraphraseCheckValid: state.paraphrase.status.valid,\r\n    item: state.morpheme.status.item,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dailyWordsRequest: () => {\r\n      return dispatch(dailyWordsRequest());\r\n    },\r\n    oneWordRequest: (word) => {\r\n      return dispatch(oneWordRequest(word));\r\n    },\r\n    paraphraseCheckRequest: (body) => {\r\n      return dispatch(paraphraseCheckRequest(body));\r\n    },\r\n    morphemeCheckRequest: (body) => {\r\n      return dispatch(morphemeCheckRequest(body));\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\r\n"]},"metadata":{},"sourceType":"module"}