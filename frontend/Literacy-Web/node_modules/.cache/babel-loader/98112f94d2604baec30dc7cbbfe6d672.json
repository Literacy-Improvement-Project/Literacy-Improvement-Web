{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheolsoon\\\\Desktop\\\\Literacy-Improvement-Web\\\\frontend\\\\Literacy-Web\\\\src\\\\components\\\\SentenceParaphrase.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"../redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { ToastContainer, toast, Flip } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    paddingTop: theme.spacing(3),\n    paddingLeft: theme.spacing(5),\n    paddingRight: theme.spacing(5),\n    paddingBottom: theme.spacing(5),\n    // padding: theme.spacing(10),\n    // width: '100%',\n    // maxWidth: '30ch',\n    height: \"42ch\",\n    backgroundColor: theme.palette.background.paper,\n    border: \"1px solid #D9D9D9\",\n    borderRadius: \"20px\"\n  },\n  test: {\n    // height: '50%',\n    float: \"right\" // border: '1px solid #D9D9D9',\n    // position: 'abolute',\n    // left: '50%',\n    // top: '50%',\n    // transform: 'translate(-50%, -50%)',\n    // display: 'flex',\n    // justifyContent: 'center',\n    // alignItems: 'center',\n\n  },\n  box: {\n    border: \"1px solid #D9D9D9\"\n  },\n  bottom: {\n    display: \"inline\",\n    borderBottom: \"1px solid #D9D9D9\"\n  }\n}));\nexport default function SentenceParaphrase({\n  paraphraseResult,\n  paraphraseCheckRequest\n}) {\n  _s();\n\n  useEffect(() => {// 렌더링\n  }, []);\n  const classes = useStyles();\n  const [userSentence, setUserSentence] = useState(\"\");\n\n  const handleChange = ({\n    target\n  }) => {\n    setUserSentence(target.value);\n  };\n\n  let exampleSentence = \"성탄 전야 미사를 집전하며 프란치스코 교황이 전한 메시지는 '어린이를 향한 관심'입니다.\";\n\n  const toastCheckParaphrase = () => toast(\"같은 의미입니다!\");\n\n  const toastCheckNonParaphrase = () => toast.error(\"다른 의미입니다. 다시 입력해 주세요.\");\n\n  const toastCheckParaphraseFailure = () => toast.error(\"확인 실패했습니다.\");\n\n  const checkParaphrase = e => {\n    let body = {\n      sentence1: exampleSentence,\n      sentence2: userSentence\n    }; // let body = {\n    //   argument: {\n    //     sentence1: exampleSentence,\n    //     sentence2: userSentence,\n    //   },\n    // };\n\n    paraphraseCheckRequest(body).then(success => {\n      if (!success) {\n        toastCheckParaphraseFailure();\n        return false;\n      } else {\n        if (paraphraseResult === \"paraphrase\") {\n          toastCheckParaphrase();\n        } else {\n          toastCheckNonParaphrase();\n        }\n\n        return true;\n      }\n    });\n  };\n\n  const checkResultParaphrase = /*#__PURE__*/_jsxDEV(\"div\", {\n    style: \"color: #0A0\",\n    children: \"\\uAC19\\uC740 \\uC758\\uBBF8\\uC785\\uB2C8\\uB2E4!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 33\n  }, this);\n\n  const checkResultNonParaphrase = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"\\uB2E4\\uB978 \\uC758\\uBBF8\\uC785\\uB2C8\\uB2E4. \\uB2E4\\uC2DC \\uC785\\uB825\\uD574 \\uC8FC\\uC138\\uC694.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n\n  const checkResult = paraphraseResult === \"paraphrase\" ? checkResultParaphrase : checkResultNonParaphrase; // 사용자에게 보여지는 부분\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 1,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 5,\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uBB38\\uC7A5 \\uC2A4\\uD130\\uB514\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 5,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.test,\n          children: \"\\uB354 \\uC54C\\uC544\\uBCF4\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: exampleSentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"standard-textarea\",\n        multiline: true,\n        label: \"\\uAC19\\uC740 \\uB73B\\uC758 \\uBB38\\uC7A5\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694.\",\n        name: \"sentence\",\n        autoFocus: true,\n        fullWidth: true,\n        value: userSentence,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        onClick: checkParaphrase,\n        variant: \"contained\",\n        children: \"\\uD655\\uC778\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), paraphraseResult === \"INIT\" ? checkResult : checkResult]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"top-center\",\n      autoClose: 2000,\n      hideProgressBar: true,\n      newestOnTop: false,\n      closeOnClick: true,\n      rtl: false,\n      pauseOnFocusLoss: true,\n      draggable: true,\n      pauseOnHover: true,\n      transition: Flip\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SentenceParaphrase, \"ZGlfeQcEc9ad+38tjSONkHguUH0=\", false, function () {\n  return [useStyles];\n});\n\n_c = SentenceParaphrase;\n\nvar _c;\n\n$RefreshReg$(_c, \"SentenceParaphrase\");","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Literacy-Improvement-Web/frontend/Literacy-Web/src/components/SentenceParaphrase.js"],"names":["React","useEffect","useState","makeStyles","Grid","TextField","Button","ToastContainer","toast","Flip","useStyles","theme","root","paddingTop","spacing","paddingLeft","paddingRight","paddingBottom","height","backgroundColor","palette","background","paper","border","borderRadius","test","float","box","bottom","display","borderBottom","SentenceParaphrase","paraphraseResult","paraphraseCheckRequest","classes","userSentence","setUserSentence","handleChange","target","value","exampleSentence","toastCheckParaphrase","toastCheckNonParaphrase","error","toastCheckParaphraseFailure","checkParaphrase","e","body","sentence1","sentence2","then","success","checkResultParaphrase","checkResultNonParaphrase","checkResult"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {} from \"../redux\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { ToastContainer, toast, Flip } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingTop: theme.spacing(3),\r\n    paddingLeft: theme.spacing(5),\r\n    paddingRight: theme.spacing(5),\r\n    paddingBottom: theme.spacing(5),\r\n\r\n    // padding: theme.spacing(10),\r\n    // width: '100%',\r\n    // maxWidth: '30ch',\r\n    height: \"42ch\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"1px solid #D9D9D9\",\r\n    borderRadius: \"20px\",\r\n  },\r\n  test: {\r\n    // height: '50%',\r\n    float: \"right\",\r\n    // border: '1px solid #D9D9D9',\r\n    // position: 'abolute',\r\n    // left: '50%',\r\n    // top: '50%',\r\n    // transform: 'translate(-50%, -50%)',\r\n\r\n    // display: 'flex',\r\n    // justifyContent: 'center',\r\n    // alignItems: 'center',\r\n  },\r\n  box: {\r\n    border: \"1px solid #D9D9D9\",\r\n  },\r\n  bottom: {\r\n    display: \"inline\",\r\n    borderBottom: \"1px solid #D9D9D9\",\r\n  },\r\n}));\r\n\r\nexport default function SentenceParaphrase({\r\n  paraphraseResult,\r\n  paraphraseCheckRequest,\r\n}) {\r\n  useEffect(() => {\r\n    // 렌더링\r\n  }, []);\r\n  const classes = useStyles();\r\n\r\n  const [userSentence, setUserSentence] = useState(\"\");\r\n\r\n  const handleChange = ({ target }) => {\r\n    setUserSentence(target.value);\r\n  };\r\n\r\n  let exampleSentence =\r\n    \"성탄 전야 미사를 집전하며 프란치스코 교황이 전한 메시지는 '어린이를 향한 관심'입니다.\";\r\n\r\n  const toastCheckParaphrase = () => toast(\"같은 의미입니다!\");\r\n  const toastCheckNonParaphrase = () =>\r\n    toast.error(\"다른 의미입니다. 다시 입력해 주세요.\");\r\n  const toastCheckParaphraseFailure = () => toast.error(\"확인 실패했습니다.\");\r\n\r\n  const checkParaphrase = (e) => {\r\n    let body = {\r\n      sentence1: exampleSentence,\r\n      sentence2: userSentence,\r\n    };\r\n    // let body = {\r\n    //   argument: {\r\n    //     sentence1: exampleSentence,\r\n    //     sentence2: userSentence,\r\n    //   },\r\n    // };\r\n    paraphraseCheckRequest(body).then((success) => {\r\n      if (!success) {\r\n        toastCheckParaphraseFailure();\r\n        return false;\r\n      } else {\r\n        if (paraphraseResult === \"paraphrase\") {\r\n          toastCheckParaphrase();\r\n        } else {\r\n          toastCheckNonParaphrase();\r\n        }\r\n        return true;\r\n      }\r\n    });\r\n  };\r\n\r\n  const checkResultParaphrase = <div style=\"color: #0A0\">같은 의미입니다!</div>;\r\n  const checkResultNonParaphrase = (\r\n    <div>다른 의미입니다. 다시 입력해 주세요.</div>\r\n  );\r\n  const checkResult =\r\n    paraphraseResult === \"paraphrase\"\r\n      ? checkResultParaphrase\r\n      : checkResultNonParaphrase;\r\n  // 사용자에게 보여지는 부분\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={5}>\r\n          <h3>문장 스터디</h3>\r\n        </Grid>\r\n        <Grid item xs={2}></Grid>\r\n        <Grid item xs={5}>\r\n          <h3 />\r\n          <button className={classes.test}>더 알아보기</button>\r\n        </Grid>\r\n        <h5>{exampleSentence}</h5>\r\n        <TextField\r\n          id=\"standard-textarea\"\r\n          multiline\r\n          label=\"같은 뜻의 문장을 입력하세요.\"\r\n          name=\"sentence\"\r\n          autoFocus\r\n          fullWidth\r\n          value={userSentence}\r\n          onChange={handleChange}\r\n        />\r\n        <Button color=\"primary\" onClick={checkParaphrase} variant=\"contained\">\r\n          확인하기\r\n        </Button>\r\n        {paraphraseResult === \"INIT\" ? checkResult : checkResult}\r\n      </Grid>\r\n      <ToastContainer\r\n        position=\"top-center\"\r\n        autoClose={2000}\r\n        hideProgressBar\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        transition={Flip}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}