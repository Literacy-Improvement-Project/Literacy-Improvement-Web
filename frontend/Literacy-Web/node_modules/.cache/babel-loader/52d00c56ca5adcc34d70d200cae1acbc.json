{"ast":null,"code":"import axios from \"axios\";\nimport { REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE } from \"./types\";\n/* DUPLICATE_ID USER ID */\n\nexport function duplicateIdCheckRequest(userId) {\n  return dispatch => {\n    // Inform Register API is starting\n    dispatch(duplicateIdCheck());\n    return axios.post(\"http://localhost:8080/duplicateIdCheck\", userId).then(response => {\n      // useable this userId\n      dispatch(duplicateIdNot());\n    }).catch(error => {\n      // request change userId\n      dispatch(duplicateIdYes());\n    });\n  };\n}\nexport function duplicateIdCheck() {\n  return {\n    type: DUPLICATE_ID\n  };\n}\nexport function duplicateIdNot() {\n  return {\n    type: DUPLICATE_ID_NOT\n  };\n}\nexport function duplicateIdYes() {\n  return {\n    type: DUPLICATE_ID_YES\n  };\n}\n/* REGISTER */\n\nexport function registerRequest(body) {\n  return dispatch => {\n    // Inform Register API is starting\n    dispatch(register());\n    console.log(body);\n    return axios.post(\"http://localhost:8080/register\", body).then(response => {\n      // SUCCEED\n      dispatch(registerSuccess());\n    }).catch(error => {\n      dispatch(registerFailure());\n    });\n  };\n}\nexport function register() {\n  return {\n    type: REGISTER\n  };\n}\nexport function registerSuccess() {\n  return {\n    type: REGISTER_SUCCESS\n  };\n}\nexport function registerFailure() {\n  return {\n    type: REGISTER_FAILURE\n  };\n}","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/문해력증진/Literacy-Improvement-Web/frontend/Literacy-Web/src/redux/signup/actions.js"],"names":["axios","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","duplicateIdCheckRequest","userId","dispatch","duplicateIdCheck","post","then","response","duplicateIdNot","catch","error","duplicateIdYes","type","DUPLICATE_ID","DUPLICATE_ID_NOT","DUPLICATE_ID_YES","registerRequest","body","register","console","log","registerSuccess","registerFailure"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,gBAAnB,EAAqCC,gBAArC,QAA6D,SAA7D;AAEA;;AAEA,OAAO,SAASC,uBAAT,CAAiCC,MAAjC,EAAyC;AAC9C,SAAQC,QAAD,IAAc;AACnB;AACAA,IAAAA,QAAQ,CAACC,gBAAgB,EAAjB,CAAR;AAEA,WAAOP,KAAK,CACTQ,IADI,CACC,wCADD,EAC2CH,MAD3C,EAEJI,IAFI,CAEEC,QAAD,IAAc;AAClB;AACAJ,MAAAA,QAAQ,CAACK,cAAc,EAAf,CAAR;AACD,KALI,EAMJC,KANI,CAMGC,KAAD,IAAW;AAChB;AACAP,MAAAA,QAAQ,CAACQ,cAAc,EAAf,CAAR;AACD,KATI,CAAP;AAUD,GAdD;AAeD;AAED,OAAO,SAASP,gBAAT,GAA4B;AACjC,SAAO;AACLQ,IAAAA,IAAI,EAAEC;AADD,GAAP;AAGD;AAED,OAAO,SAASL,cAAT,GAA0B;AAC/B,SAAO;AACLI,IAAAA,IAAI,EAAEE;AADD,GAAP;AAGD;AAED,OAAO,SAASH,cAAT,GAA0B;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAEG;AADD,GAAP;AAGD;AAED;;AACA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,SAAQd,QAAD,IAAc;AACnB;AACAA,IAAAA,QAAQ,CAACe,QAAQ,EAAT,CAAR;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEA,WAAOpB,KAAK,CACTQ,IADI,CACC,gCADD,EACmCY,IADnC,EAEJX,IAFI,CAEEC,QAAD,IAAc;AAClB;AACAJ,MAAAA,QAAQ,CAACkB,eAAe,EAAhB,CAAR;AACD,KALI,EAMJZ,KANI,CAMGC,KAAD,IAAW;AAChBP,MAAAA,QAAQ,CAACmB,eAAe,EAAhB,CAAR;AACD,KARI,CAAP;AASD,GAfD;AAgBD;AAED,OAAO,SAASJ,QAAT,GAAoB;AACzB,SAAO;AACLN,IAAAA,IAAI,EAAEd;AADD,GAAP;AAGD;AAED,OAAO,SAASuB,eAAT,GAA2B;AAChC,SAAO;AACLT,IAAAA,IAAI,EAAEb;AADD,GAAP;AAGD;AAED,OAAO,SAASuB,eAAT,GAA2B;AAChC,SAAO;AACLV,IAAAA,IAAI,EAAEZ;AADD,GAAP;AAGD","sourcesContent":["import axios from \"axios\";\r\nimport { REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE } from \"./types\";\r\n\r\n/* DUPLICATE_ID USER ID */\r\n\r\nexport function duplicateIdCheckRequest(userId) {\r\n  return (dispatch) => {\r\n    // Inform Register API is starting\r\n    dispatch(duplicateIdCheck());\r\n\r\n    return axios\r\n      .post(\"http://localhost:8080/duplicateIdCheck\", userId)\r\n      .then((response) => {\r\n        // useable this userId\r\n        dispatch(duplicateIdNot());\r\n      })\r\n      .catch((error) => {\r\n        // request change userId\r\n        dispatch(duplicateIdYes());\r\n      });\r\n  };\r\n}\r\n\r\nexport function duplicateIdCheck() {\r\n  return {\r\n    type: DUPLICATE_ID,\r\n  };\r\n}\r\n\r\nexport function duplicateIdNot() {\r\n  return {\r\n    type: DUPLICATE_ID_NOT,\r\n  };\r\n}\r\n\r\nexport function duplicateIdYes() {\r\n  return {\r\n    type: DUPLICATE_ID_YES,\r\n  };\r\n}\r\n\r\n/* REGISTER */\r\nexport function registerRequest(body) {\r\n  return (dispatch) => {\r\n    // Inform Register API is starting\r\n    dispatch(register());\r\n\r\n    console.log(body);\r\n\r\n    return axios\r\n      .post(\"http://localhost:8080/register\", body)\r\n      .then((response) => {\r\n        // SUCCEED\r\n        dispatch(registerSuccess());\r\n      })\r\n      .catch((error) => {\r\n        dispatch(registerFailure());\r\n      });\r\n  };\r\n}\r\n\r\nexport function register() {\r\n  return {\r\n    type: REGISTER,\r\n  };\r\n}\r\n\r\nexport function registerSuccess() {\r\n  return {\r\n    type: REGISTER_SUCCESS,\r\n  };\r\n}\r\n\r\nexport function registerFailure() {\r\n  return {\r\n    type: REGISTER_FAILURE,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}