{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheolsoon\\\\Desktop\\\\Literacy-Improvement-Web\\\\frontend\\\\Literacy-Web\\\\src\\\\components\\\\voiceRecognition\\\\VoiceRecognition.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from \"react\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport \"./VoiceRecognition.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Link } from \"react-router-dom\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport { useSpeechRecognition } from \"react-speech-kit\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function VoiceRecognition({\n  onClickVoiceRecognition\n}) {\n  _s();\n\n  const [stream, setStream] = useState();\n  const [media, setMedia] = useState();\n  const [onRec, setOnRec] = useState(true);\n  const [isCheckRec, setIsCheckRec] = useState(true);\n  const [source, setSource] = useState();\n  const [analyser, setAnalyser] = useState();\n  const [audioUrl, setAudioUrl] = useState();\n  const [reAudioUrl, setReAudioUrl] = useState(); // 음성인식 API 사용\n\n  const [value, setValue] = useState(\"\");\n  const {\n    listen,\n    listening,\n    stop\n  } = useSpeechRecognition({\n    onResult: result => {\n      // 음성인식 결과가 value 상태값으로 할당됩니다.\n      setValue(result);\n    }\n  });\n  let voiceFile;\n\n  const onRecAudio = () => {\n    // 음원정보를 담은 노드를 생성하거나 음원을 실행또는 디코딩 시키는 일을 한다\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)(); // 자바스크립트를 통해 음원의 진행상태에 직접접근에 사용된다.\n\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\n    setAnalyser(analyser);\n\n    function makeSound(stream) {\n      // 내 컴퓨터의 마이크나 다른 소스를 통해 발생한 오디오 스트림의 정보를 보여준다.\n      const source = audioCtx.createMediaStreamSource(stream);\n      setSource(source);\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n    } // 마이크 사용 권한 획득\n\n\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.start();\n      setStream(stream);\n      setMedia(mediaRecorder);\n      makeSound(stream);\n\n      analyser.onaudioprocess = function (e) {\n        // 3분(180초) 지나면 자동으로 음성 저장 및 녹음 중지\n        if (e.playbackTime > 180) {\n          stream.getAudioTracks().forEach(function (track) {\n            track.stop();\n          });\n          mediaRecorder.stop(); // 메서드가 호출 된 노드 연결 해제\n\n          analyser.disconnect();\n          audioCtx.createMediaStreamSource(stream).disconnect();\n\n          mediaRecorder.ondataavailable = function (e) {\n            setAudioUrl(e.data);\n            setOnRec(true);\n          };\n        } else {\n          setOnRec(false);\n        }\n      };\n    }); // 음성인식 API\n\n    listen();\n  }; // 사용자가 음성 녹음을 중지했을 때\n\n\n  const offRecAudio = () => {\n    // dataavailable 이벤트로 Blob 데이터에 대한 응답을 받을 수 있음\n    media.ondataavailable = function (e) {\n      setAudioUrl(e.data);\n      setOnRec(true);\n    }; // 모든 트랙에서 stop()을 호출해 오디오 스트림을 정지\n\n\n    stream.getAudioTracks().forEach(function (track) {\n      track.stop();\n    }); // 미디어 캡처 중지\n\n    media.stop(); // 메서드가 호출 된 노드 연결 해제\n\n    analyser.disconnect();\n    source.disconnect();\n    stop();\n  };\n\n  const onSubmitAudioFile = useCallback(() => {\n    console.log({\n      value\n    });\n\n    if (audioUrl) {\n      console.log(audioUrl);\n      console.log(URL.createObjectURL(audioUrl)); // 출력된 링크에서 녹음된 오디오 확인 가능\n    } // File 생성자를 사용해 파일로 변환\n\n\n    const audioFile = new File([audioUrl], \"audioFile.mp3\", {\n      lastModified: new Date().getTime(),\n      type: \"audio\"\n    });\n    console.log(audioFile); // 오디오 파일 자체를 보내기\n\n    onSearchAudioFile(audioFile);\n    setIsCheckRec(false);\n  }, [audioUrl]); // 결과확인 클릭 시 음성파일 보내기\n\n  function onSearchAudioFile(audioUrl) {\n    let reader = new FileReader(); // Audio 파일 base64로 인코딩\n\n    if (audioUrl) {\n      reader.readAsDataURL(audioUrl);\n    }\n\n    reader.onload = function (e) {\n      // Base64로 인코딩한 후 다시 디코딩 해준다.\n      const base64Audio = e.target.result.toString().split(\",\");\n      console.log(base64Audio[1]);\n      const contentType = base64Audio[0].split(\":\")[1];\n      const raw = window.atob(base64Audio[1]);\n      const rawLength = raw.length; // 부호 없는 1byte 정수 배열을 생성\n\n      const uInt8Array = new Uint8Array(rawLength); // 길이만 지정된 배열\n\n      let i = 0;\n\n      while (i < rawLength) {\n        uInt8Array[i] = raw.charCodeAt(i);\n        i++;\n      }\n\n      const reAudioBlob = new Blob([uInt8Array], {\n        type: contentType\n      });\n      setReAudioUrl(reAudioBlob); // reAudioUrl로 file을 만들어서 formData에 넣어서 전송하기\n      // base64Audio[1] base64, raw data를 쪼개서 form data에 넣어서 보내기\n\n      onClickVoiceRecognition(base64Audio[1]);\n    };\n  }\n\n  const onRecAudioButton = /*#__PURE__*/_jsxDEV(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: onRecAudio,\n    children: \"\\uB179\\uC74C\\uC2DC\\uC791\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n\n  const offRecAudioButton = /*#__PURE__*/_jsxDEV(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: offRecAudio,\n    children: \"\\uB179\\uC74C\\uC885\\uB8CC\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n\n  const checkRec = /*#__PURE__*/_jsxDEV(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: onSubmitAudioFile,\n    children: \"\\uACB0\\uACFC\\uD655\\uC778\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n\n  const checkedRec = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        onClick: onSubmitAudioFile,\n        children: \"\\uACB0\\uACFC\\uD655\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: reAudioUrl ? /*#__PURE__*/_jsxDEV(ReactAudioPlayer, {\n        src: URL.createObjectURL(reAudioUrl),\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this) : undefined\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"title\",\n      children: \" \\uC74C\\uC131\\uC73C\\uB85C \\uAC80\\uC0C9\\uD558\\uAE30 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: onRec ? onRecAudioButton : offRecAudioButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: isCheckRec ? checkRec : checkedRec\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VoiceRecognition, \"Gv5xYvHERsMpd8cZKZ/ANVDN+co=\", false, function () {\n  return [useSpeechRecognition];\n});\n\n_c = VoiceRecognition;\n\nvar _c;\n\n$RefreshReg$(_c, \"VoiceRecognition\");","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Literacy-Improvement-Web/frontend/Literacy-Web/src/components/voiceRecognition/VoiceRecognition.js"],"names":["React","useState","useCallback","Button","TextField","Grid","Link","ReactAudioPlayer","useSpeechRecognition","VoiceRecognition","onClickVoiceRecognition","stream","setStream","media","setMedia","onRec","setOnRec","isCheckRec","setIsCheckRec","source","setSource","analyser","setAnalyser","audioUrl","setAudioUrl","reAudioUrl","setReAudioUrl","value","setValue","listen","listening","stop","onResult","result","voiceFile","onRecAudio","audioCtx","window","AudioContext","webkitAudioContext","createScriptProcessor","makeSound","createMediaStreamSource","connect","destination","navigator","mediaDevices","getUserMedia","audio","then","mediaRecorder","MediaRecorder","start","onaudioprocess","e","playbackTime","getAudioTracks","forEach","track","disconnect","ondataavailable","data","offRecAudio","onSubmitAudioFile","console","log","URL","createObjectURL","audioFile","File","lastModified","Date","getTime","type","onSearchAudioFile","reader","FileReader","readAsDataURL","onload","base64Audio","target","toString","split","contentType","raw","atob","rawLength","length","uInt8Array","Uint8Array","i","charCodeAt","reAudioBlob","Blob","onRecAudioButton","offRecAudioButton","checkRec","checkedRec","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport \"./VoiceRecognition.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport ReactAudioPlayer from \"react-audio-player\";\r\nimport { useSpeechRecognition } from \"react-speech-kit\";\r\n\r\nexport default function VoiceRecognition({ onClickVoiceRecognition }) {\r\n  const [stream, setStream] = useState();\r\n  const [media, setMedia] = useState();\r\n  const [onRec, setOnRec] = useState(true);\r\n  const [isCheckRec, setIsCheckRec] = useState(true);\r\n  const [source, setSource] = useState();\r\n  const [analyser, setAnalyser] = useState();\r\n  const [audioUrl, setAudioUrl] = useState();\r\n  const [reAudioUrl, setReAudioUrl] = useState();\r\n\r\n  // 음성인식 API 사용\r\n  const [value, setValue] = useState(\"\");\r\n  const { listen, listening, stop } = useSpeechRecognition({\r\n    onResult: (result) => {\r\n      // 음성인식 결과가 value 상태값으로 할당됩니다.\r\n      setValue(result);\r\n    },\r\n  });\r\n\r\n  let voiceFile;\r\n\r\n  const onRecAudio = () => {\r\n    // 음원정보를 담은 노드를 생성하거나 음원을 실행또는 디코딩 시키는 일을 한다\r\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n    // 자바스크립트를 통해 음원의 진행상태에 직접접근에 사용된다.\r\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\r\n    setAnalyser(analyser);\r\n\r\n    function makeSound(stream) {\r\n      // 내 컴퓨터의 마이크나 다른 소스를 통해 발생한 오디오 스트림의 정보를 보여준다.\r\n      const source = audioCtx.createMediaStreamSource(stream);\r\n      setSource(source);\r\n      source.connect(analyser);\r\n      analyser.connect(audioCtx.destination);\r\n    }\r\n    // 마이크 사용 권한 획득\r\n    navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\r\n      const mediaRecorder = new MediaRecorder(stream);\r\n      mediaRecorder.start();\r\n      setStream(stream);\r\n      setMedia(mediaRecorder);\r\n      makeSound(stream);\r\n\r\n      analyser.onaudioprocess = function (e) {\r\n        // 3분(180초) 지나면 자동으로 음성 저장 및 녹음 중지\r\n        if (e.playbackTime > 180) {\r\n          stream.getAudioTracks().forEach(function (track) {\r\n            track.stop();\r\n          });\r\n          mediaRecorder.stop();\r\n          // 메서드가 호출 된 노드 연결 해제\r\n          analyser.disconnect();\r\n          audioCtx.createMediaStreamSource(stream).disconnect();\r\n\r\n          mediaRecorder.ondataavailable = function (e) {\r\n            setAudioUrl(e.data);\r\n            setOnRec(true);\r\n          };\r\n        } else {\r\n          setOnRec(false);\r\n        }\r\n      };\r\n    });\r\n\r\n    // 음성인식 API\r\n    listen();\r\n  };\r\n\r\n  // 사용자가 음성 녹음을 중지했을 때\r\n  const offRecAudio = () => {\r\n    // dataavailable 이벤트로 Blob 데이터에 대한 응답을 받을 수 있음\r\n    media.ondataavailable = function (e) {\r\n      setAudioUrl(e.data);\r\n      setOnRec(true);\r\n    };\r\n\r\n    // 모든 트랙에서 stop()을 호출해 오디오 스트림을 정지\r\n    stream.getAudioTracks().forEach(function (track) {\r\n      track.stop();\r\n    });\r\n\r\n    // 미디어 캡처 중지\r\n    media.stop();\r\n    // 메서드가 호출 된 노드 연결 해제\r\n    analyser.disconnect();\r\n    source.disconnect();\r\n\r\n    stop();\r\n  };\r\n\r\n  const onSubmitAudioFile = useCallback(() => {\r\n    console.log({ value });\r\n    if (audioUrl) {\r\n      console.log(audioUrl);\r\n      console.log(URL.createObjectURL(audioUrl)); // 출력된 링크에서 녹음된 오디오 확인 가능\r\n    }\r\n    // File 생성자를 사용해 파일로 변환\r\n    const audioFile = new File([audioUrl], \"audioFile.mp3\", {\r\n      lastModified: new Date().getTime(),\r\n      type: \"audio\",\r\n    });\r\n    console.log(audioFile);\r\n    // 오디오 파일 자체를 보내기\r\n    onSearchAudioFile(audioFile);\r\n\r\n    setIsCheckRec(false);\r\n  }, [audioUrl]);\r\n\r\n  // 결과확인 클릭 시 음성파일 보내기\r\n  function onSearchAudioFile(audioUrl) {\r\n    let reader = new FileReader();\r\n\r\n    // Audio 파일 base64로 인코딩\r\n    if (audioUrl) {\r\n      reader.readAsDataURL(audioUrl);\r\n    }\r\n    reader.onload = function (e) {\r\n      // Base64로 인코딩한 후 다시 디코딩 해준다.\r\n      const base64Audio = e.target.result.toString().split(\",\");\r\n      console.log(base64Audio[1]);\r\n      const contentType = base64Audio[0].split(\":\")[1];\r\n      const raw = window.atob(base64Audio[1]);\r\n      const rawLength = raw.length;\r\n      // 부호 없는 1byte 정수 배열을 생성\r\n      const uInt8Array = new Uint8Array(rawLength);\r\n      // 길이만 지정된 배열\r\n      let i = 0;\r\n      while (i < rawLength) {\r\n        uInt8Array[i] = raw.charCodeAt(i);\r\n        i++;\r\n      }\r\n\r\n      const reAudioBlob = new Blob([uInt8Array], {\r\n        type: contentType,\r\n      });\r\n      setReAudioUrl(reAudioBlob);\r\n\r\n      // reAudioUrl로 file을 만들어서 formData에 넣어서 전송하기\r\n\r\n      // base64Audio[1] base64, raw data를 쪼개서 form data에 넣어서 보내기\r\n\r\n      onClickVoiceRecognition(base64Audio[1]);\r\n    };\r\n  }\r\n\r\n  const onRecAudioButton = (\r\n    <Button color=\"primary\" variant=\"contained\" onClick={onRecAudio}>\r\n      녹음시작\r\n    </Button>\r\n  );\r\n  const offRecAudioButton = (\r\n    <Button color=\"primary\" variant=\"contained\" onClick={offRecAudio}>\r\n      녹음종료\r\n    </Button>\r\n  );\r\n\r\n  const checkRec = (\r\n    <Button color=\"primary\" variant=\"contained\" onClick={onSubmitAudioFile}>\r\n      결과확인\r\n    </Button>\r\n  );\r\n  const checkedRec = (\r\n    <div>\r\n      <Grid item xs={12}>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={onSubmitAudioFile}>\r\n          결과확인\r\n        </Button>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <div>{value}</div>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        {reAudioUrl ? (\r\n          <ReactAudioPlayer src={URL.createObjectURL(reAudioUrl)} controls />\r\n        ) : undefined}\r\n      </Grid>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <h3 className=\"title\"> 음성으로 검색하기 </h3>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          {onRec ? onRecAudioButton : offRecAudioButton}\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {isCheckRec ? checkRec : checkedRec}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}