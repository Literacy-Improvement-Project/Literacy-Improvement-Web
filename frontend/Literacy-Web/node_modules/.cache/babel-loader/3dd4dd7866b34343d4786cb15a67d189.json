{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheolsoon\\\\Desktop\\\\Literacy-Improvement-Web\\\\frontend\\\\Literacy-Web\\\\src\\\\page\\\\Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport MainWordOfTheDay from \"../components/MainWordOfTheDay\";\nimport MainWordMeaning from \"../components/WordMeaning/MainWordMeaning\";\nimport { dailyWordsRequest, oneWordRequest, paraphraseCheckRequest } from \"../redux\";\nimport SentenceParaphrase from \"../components/SentenceParaphrase\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(2)\n  }\n}));\n\nfunction Main({\n  dailyWordsList,\n  wordStatus,\n  dailyWordsRequest,\n  oneWordRequest,\n  isLoggedIn,\n  paraphraseCheckRequest,\n  paraphraseResult,\n  paraphraseCheckValid\n}) {\n  _s();\n\n  useEffect(() => {\n    // 렌더링\n    dailyWordsRequest();\n  }, []);\n  const classes = useStyles();\n  console.log(dailyWordsList);\n\n  const handleOneWord = word => {\n    oneWordRequest(word);\n    console.log(word);\n  };\n\n  const onClickCheckParaphrase = body => {\n    paraphraseCheckRequest(body).then(() => {\n      if (paraphraseCheckValid === true) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n  }; // 사용자에게 보여지는 부분\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 8,\n          children: /*#__PURE__*/_jsxDEV(MainWordOfTheDay, {\n            isLoggedIn: isLoggedIn,\n            dailyWordsList: dailyWordsList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(SentenceParaphrase, {\n            paraphraseResult: paraphraseResult,\n            onClickCheckParaphrase: onClickCheckParaphrase\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(MainWordMeaning, {\n            handleOneWord: handleOneWord,\n            wordStatus: wordStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"v7TDUGheAkBmKIQo9Gj65jeexyQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = Main;\n\nconst mapStateToProps = state => {\n  return {\n    // userID: state.authentication.status.currentUser,\n    dailyWordsList: state.dailyWords.status.dailyWordsList,\n    isLoggedIn: state.authentication.status.isLoggedIn,\n    paraphraseResult: state.paraphrase.status.result,\n    wordStatus: state.oneWord.status.wordStatus,\n    paraphraseCheckValid: state.paraphrase.status.valid\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dailyWordsRequest: () => {\n      return dispatch(dailyWordsRequest());\n    },\n    oneWordRequest: word => {\n      return dispatch(oneWordRequest(word));\n    },\n    paraphraseCheckRequest: body => {\n      return dispatch(paraphraseCheckRequest(body));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Literacy-Improvement-Web/frontend/Literacy-Web/src/page/Main.js"],"names":["React","useEffect","useState","connect","MainWordOfTheDay","MainWordMeaning","dailyWordsRequest","oneWordRequest","paraphraseCheckRequest","SentenceParaphrase","makeStyles","Grid","useStyles","theme","root","padding","spacing","Main","dailyWordsList","wordStatus","isLoggedIn","paraphraseResult","paraphraseCheckValid","classes","console","log","handleOneWord","word","onClickCheckParaphrase","body","then","mapStateToProps","state","dailyWords","status","authentication","paraphrase","result","oneWord","valid","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport MainWordOfTheDay from \"../components/MainWordOfTheDay\";\r\nimport MainWordMeaning from \"../components/WordMeaning/MainWordMeaning\";\r\nimport {\r\n  dailyWordsRequest,\r\n  oneWordRequest,\r\n  paraphraseCheckRequest,\r\n} from \"../redux\";\r\nimport SentenceParaphrase from \"../components/SentenceParaphrase\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction Main({\r\n  dailyWordsList,\r\n  wordStatus,\r\n  dailyWordsRequest,\r\n  oneWordRequest,\r\n  isLoggedIn,\r\n  paraphraseCheckRequest,\r\n  paraphraseResult,\r\n  paraphraseCheckValid,\r\n}) {\r\n  useEffect(() => {\r\n    // 렌더링\r\n    dailyWordsRequest();\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n\r\n  console.log(dailyWordsList);\r\n\r\n  const handleOneWord = (word) => {\r\n    oneWordRequest(word);\r\n    console.log(word);\r\n  };\r\n\r\n  const onClickCheckParaphrase = (body) => {\r\n    paraphraseCheckRequest(body).then(() => {\r\n      if (paraphraseCheckValid === true) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n  };\r\n\r\n  // 사용자에게 보여지는 부분\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={8}>\r\n            <MainWordOfTheDay\r\n              isLoggedIn={isLoggedIn}\r\n              dailyWordsList={dailyWordsList}\r\n            ></MainWordOfTheDay>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <SentenceParaphrase\r\n              paraphraseResult={paraphraseResult}\r\n              onClickCheckParaphrase={onClickCheckParaphrase}\r\n            ></SentenceParaphrase>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <MainWordMeaning\r\n              handleOneWord={handleOneWord}\r\n              wordStatus={wordStatus}\r\n            ></MainWordMeaning>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    // userID: state.authentication.status.currentUser,\r\n    dailyWordsList: state.dailyWords.status.dailyWordsList,\r\n    isLoggedIn: state.authentication.status.isLoggedIn,\r\n    paraphraseResult: state.paraphrase.status.result,\r\n    wordStatus: state.oneWord.status.wordStatus,\r\n    paraphraseCheckValid: state.paraphrase.status.valid,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dailyWordsRequest: () => {\r\n      return dispatch(dailyWordsRequest());\r\n    },\r\n    oneWordRequest: (word) => {\r\n      return dispatch(oneWordRequest(word));\r\n    },\r\n    paraphraseCheckRequest: (body) => {\r\n      return dispatch(paraphraseCheckRequest(body));\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\r\n"]},"metadata":{},"sourceType":"module"}