{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\damja\\\\Desktop\\\\\\uC18C\\uD504\\uD2B8\\\\\\uC18C\\uD504\\uD2B8 3-2\\\\\\uBB38\\uD574\\uB825\\uC99D\\uC9C4\\\\Literacy-Improvement-Web\\\\frontend\\\\Literacy-Web\\\\frontend\\\\Literacy-Web\\\\src\\\\components\\\\quiz\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport { Helmet } from 'react-helmet';\nimport M from 'materialize-css';\nimport questions from '../../questions.json';\nimport { quizRequest } from \"../../redux\";\nimport { Link, useHistory } from 'react-router-dom';\nimport isEmpty from './is-empty';\nimport './_quiz.scss';\nimport classnames from 'classnames';\nimport * as _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Quiz({\n  quizStatus,\n  quizRequest\n}) {\n  _s();\n\n  let history = useHistory();\n  let myquestions = {};\n  const [myQuestions, setMyQuestions] = useState({});\n  const [currentQuestion, setCurrentQuestion] = useState({});\n  const [nextQuestion, setNextQuestion] = useState({});\n  const [previousQuestion, setPreviousQuestion] = useState({});\n  var currentAnswer = '';\n  const [numberOfQuestions, setNumberOfQuestions] = useState(0);\n  const [numberOfAnswered, setNumberOfAnswered] = useState(0);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [wrongAnswers, setWrongAnswers] = useState(0);\n  const [time, setTime] = useState({});\n  const [interval, setInterval] = useState(null);\n  const [NBDisabled, setNBDisabled] = useState(false);\n  const [PBDisabled, setPBDisabled] = useState(false);\n  useEffect(() => {\n    quizRequest();\n    displayQuestions();\n    startTimer();\n  }, []);\n\n  const displayQuestions = () => {\n    if (currentQuestionIndex == 0) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n\n    myquestions = _.cloneDeep(questions);\n    console.log(questions);\n    console.log(myquestions);\n    console.log(currentQuestionIndex);\n    setCurrentQuestion(myquestions[currentQuestionIndex]);\n    setNextQuestion(myquestions[currentQuestionIndex + 1]);\n    console.log(nextQuestion.question);\n    setNumberOfQuestions(myquestions.length);\n    currentAnswer = currentQuestion.answer;\n    handleDisableButton();\n\n    if (currentQuestionIndex <= 1) {\n      setPreviousQuestion(myquestions[currentQuestionIndex - 1]);\n    }\n  };\n\n  const endGame = () => {\n    if (window.confirm('투표가 끝났습니다.')) {\n      history.push('/Home');\n    }\n  };\n\n  const handleOptionClick = e => {\n    currentAnswer = currentQuestion.answer;\n    console.log(currentAnswer);\n    setCurrentQuestionIndex(currentQuestionIndex + 1);\n\n    if (e.target.innerHTML.toString().toLowerCase() === currentAnswer.toLowerCase()) {\n      clickCorrect();\n    } else {\n      clickWrong();\n    }\n  };\n\n  const clickCorrect = () => {\n    M.toast({\n      html: '정답입니다!',\n      classes: 'toast-valid',\n      displayLength: 1500\n    });\n\n    if (currentQuestionIndex == 0) {\n      setScore(score + 1);\n      setCorrectAnswers(correctAnswers + 1);\n      setNumberOfAnswered(numberOfAnswered + 1);\n    } else if (currentQuestionIndex != 0) {\n      setScore(score + 1);\n      setCorrectAnswers(correctAnswers + 1);\n      let CQI = currentQuestionIndex + 1;\n      setCurrentQuestionIndex(CQI);\n      console.log(currentQuestionIndex);\n      setNumberOfAnswered(numberOfAnswered + 1);\n    }\n\n    displayQuestions();\n\n    if (nextQuestion === undefined) {\n      endGame();\n    } else {\n      displayQuestions();\n    }\n  };\n\n  const clickWrong = () => {\n    navigator.vibrate(1000);\n    M.toast({\n      html: '틀렸습니다!',\n      classes: 'toast-invalid',\n      displayLength: 1500\n    });\n    setWrongAnswers(wrongAnswers + 1);\n    setCurrentQuestionIndex(currentQuestionIndex + 1);\n    console.log(currentQuestionIndex);\n    setNumberOfAnswered(numberOfAnswered);\n    displayQuestions();\n\n    if (nextQuestion === undefined) {\n      endGame();\n    } else {\n      displayQuestions();\n    }\n  };\n\n  const handleNextButtonClick = () => {\n    if (nextQuestion !== undefined) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      displayQuestions();\n    }\n  };\n\n  const handlePreviousButtonClick = () => {\n    if (previousQuestion == undefined) {\n      M.toast({\n        html: '이전 문제가 없습니다.',\n        classes: 'toast-invalid',\n        displayLength: 1500\n      });\n      displayQuestions();\n    } else if (nextQuestion !== undefined) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n      displayQuestions();\n    }\n  };\n\n  const handleQuitButtonClick = () => {\n    if (window.confirm('나가시겠습니까?')) {\n      history.push('/Home');\n    }\n  };\n\n  const handleButtonClick = e => {\n    switch (e.target.id) {\n      case 'next-button':\n        handleNextButtonClick();\n        break;\n\n      case 'previous-button':\n        handlePreviousButtonClick();\n        break;\n\n      case 'quit-button':\n        handleQuitButtonClick();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const startTimer = () => {\n    const countDownTime = Date.now + 180000;\n    console.log(countDownTime);\n    setInterval(() => {\n      let now = new Date();\n      let distance = countDownTime - now;\n      let minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n      let seconds = Math.floor(distance % (1000 * 60) / 1000);\n\n      if (distance < 0) {\n        clearInterval(interval);\n        setTime({\n          minutes: 0,\n          seconds: 0\n        }, () => {\n          alert('퀴즈가 끝났습니다!');\n          history.push('/Home');\n        });\n      } else {\n        setTime({\n          minutes,\n          seconds,\n          distance\n        });\n      }\n    }, 1000);\n  };\n\n  const handleDisableButton = () => {\n    if (currentQuestionIndex === 0 || currentQuestionIndex < 0) {\n      setPBDisabled(true);\n    } else {\n      setPBDisabled(false);\n    }\n\n    if (nextQuestion === undefined || currentQuestionIndex + 1 === numberOfQuestions) {\n      setNBDisabled(true);\n    } else {\n      setNBDisabled(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Quiz Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uC624\\uB298\\uC758 \\uD034\\uC988\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lifeline-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"left\",\n            style: {\n              float: 'left'\n            },\n            children: [currentQuestionIndex + 1, \" of \", numberOfQuestions]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"right\",\n            children: [time.minutes, \":\", time.seconds, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mdi mdi-clock-outline mdi-24px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this), console.log(currentQuestion), console.log(currentQuestionIndex), console.log(time.minutes), console.log(time), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: handleOptionClick,\n          className: \"option\",\n          children: currentQuestion.optionA\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: handleOptionClick,\n          className: \"option\",\n          children: currentQuestion.optionB\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: handleOptionClick,\n          className: \"option\",\n          children: currentQuestion.optionC\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: handleOptionClick,\n          className: \"option\",\n          children: currentQuestion.optionD\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: classnames('', {\n            'disable': PBDisabled\n          }),\n          id: \"previous-button\",\n          onClick: handleButtonClick,\n          children: \"\\uC774\\uC804\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classnames('', {\n            'disable': NBDisabled\n          }),\n          id: \"next-button\",\n          onClick: handleButtonClick,\n          children: \"\\uB2E4\\uC74C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"quit-button\",\n          onClick: handleButtonClick,\n          children: \"\\uB098\\uAC00\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Quiz, \"YfxkmL7IhwoienNM0p41LSHkhNM=\", false, function () {\n  return [useHistory];\n});\n\n_c = Quiz;\n\nconst mapStateToProps = state => {\n  return {\n    quizStatus: state.quiz.status.quizStatus\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    quizRequest: () => {\n      return dispatch(quizRequest());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/damja/Desktop/소프트/소프트 3-2/문해력증진/Literacy-Improvement-Web/frontend/Literacy-Web/frontend/Literacy-Web/src/components/quiz/Quiz.js"],"names":["React","Fragment","useEffect","useState","connect","useSelector","Helmet","M","questions","quizRequest","Link","useHistory","isEmpty","classnames","_","Quiz","quizStatus","history","myquestions","myQuestions","setMyQuestions","currentQuestion","setCurrentQuestion","nextQuestion","setNextQuestion","previousQuestion","setPreviousQuestion","currentAnswer","numberOfQuestions","setNumberOfQuestions","numberOfAnswered","setNumberOfAnswered","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","correctAnswers","setCorrectAnswers","wrongAnswers","setWrongAnswers","time","setTime","interval","setInterval","NBDisabled","setNBDisabled","PBDisabled","setPBDisabled","displayQuestions","startTimer","cloneDeep","console","log","question","length","answer","handleDisableButton","endGame","window","confirm","push","handleOptionClick","e","target","innerHTML","toString","toLowerCase","clickCorrect","clickWrong","toast","html","classes","displayLength","CQI","undefined","navigator","vibrate","handleNextButtonClick","handlePreviousButtonClick","handleQuitButtonClick","handleButtonClick","id","countDownTime","Date","now","distance","minutes","Math","floor","seconds","clearInterval","alert","float","optionA","optionB","optionC","optionD","mapStateToProps","state","quiz","status","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { connect, useSelector } from \"react-redux\";\r\nimport { Helmet } from 'react-helmet';\r\nimport M from 'materialize-css';\r\n\r\nimport questions from '../../questions.json';\r\nimport { quizRequest } from \"../../redux\";\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport isEmpty from './is-empty';\r\nimport './_quiz.scss';\r\nimport classnames from 'classnames';\r\nimport * as _ from 'lodash';\r\n\r\nfunction Quiz({ quizStatus, quizRequest}){\r\n    \r\n    \r\n    let history = useHistory();\r\n\r\n    let myquestions = {};\r\n    const [myQuestions, setMyQuestions] = useState({});\r\n    const [currentQuestion, setCurrentQuestion] = useState({});\r\n    const [nextQuestion, setNextQuestion] = useState({});\r\n    const [previousQuestion, setPreviousQuestion] = useState({});\r\n    var currentAnswer = '';\r\n    const [numberOfQuestions,setNumberOfQuestions] = useState(0);\r\n    const [numberOfAnswered,setNumberOfAnswered] = useState(0);\r\n    const [currentQuestionIndex,setCurrentQuestionIndex] = useState(0);\r\n    const [score,setScore] = useState(0);\r\n    const [correctAnswers, setCorrectAnswers] = useState(0);\r\n    const [wrongAnswers,setWrongAnswers] = useState(0);\r\n    const [time, setTime] = useState({});\r\n    const [interval, setInterval] = useState(null);\r\n    const [NBDisabled,setNBDisabled] = useState(false);\r\n    const [PBDisabled,setPBDisabled] = useState(false);\r\n\r\n    useEffect(()=> {\r\n        quizRequest();\r\n        displayQuestions();\r\n        startTimer();\r\n    }, []);\r\n\r\n    const displayQuestions = () => { \r\n        if(currentQuestionIndex == 0) {\r\n            setCurrentQuestionIndex(currentQuestionIndex + 1 );\r\n        }\r\n        myquestions = _.cloneDeep(questions);\r\n        console.log(questions);\r\n        console.log(myquestions);\r\n        console.log(currentQuestionIndex);\r\n        setCurrentQuestion(myquestions[currentQuestionIndex]);\r\n        setNextQuestion(myquestions[currentQuestionIndex + 1]);\r\n        console.log(nextQuestion.question);\r\n        setNumberOfQuestions(myquestions.length);\r\n        currentAnswer = currentQuestion.answer;\r\n        handleDisableButton();\r\n        if(currentQuestionIndex <= 1) {\r\n            setPreviousQuestion(myquestions[currentQuestionIndex -1]);\r\n        }\r\n    }\r\n    const endGame = () => {\r\n        if (window.confirm('투표가 끝났습니다.')) {\r\n            history.push('/Home');\r\n        }\r\n\r\n    }\r\n    const handleOptionClick = (e) => {\r\n        currentAnswer = currentQuestion.answer;\r\n        console.log(currentAnswer);\r\n        setCurrentQuestionIndex(currentQuestionIndex +1);\r\n        if (e.target.innerHTML.toString().toLowerCase() === currentAnswer.toLowerCase())  {\r\n            clickCorrect();\r\n        }else {\r\n            clickWrong();\r\n        }\r\n    }\r\n    const clickCorrect = () => {\r\n        M.toast({\r\n            html: '정답입니다!',\r\n            classes: 'toast-valid',\r\n            displayLength: 1500\r\n        });\r\n   \r\n        if(currentQuestionIndex == 0){ \r\n            setScore(score+1);\r\n            setCorrectAnswers(correctAnswers+1);\r\n            setNumberOfAnswered(numberOfAnswered+1);\r\n        }\r\n        else if(currentQuestionIndex != 0) {\r\n            setScore(score+1);\r\n            setCorrectAnswers(correctAnswers+1);\r\n            let CQI = currentQuestionIndex +1;\r\n            setCurrentQuestionIndex(CQI);\r\n            console.log(currentQuestionIndex);\r\n            setNumberOfAnswered(numberOfAnswered+1);\r\n        }\r\n        displayQuestions();\r\n        if (nextQuestion === undefined) {\r\n            endGame();\r\n        } else {\r\n            displayQuestions();\r\n        }\r\n    }\r\n    const clickWrong = () => {\r\n        navigator.vibrate(1000);\r\n        M.toast({\r\n            html: '틀렸습니다!',\r\n            classes: 'toast-invalid',\r\n            displayLength: 1500\r\n        });\r\n        setWrongAnswers(wrongAnswers+1);\r\n        setCurrentQuestionIndex(currentQuestionIndex+1);\r\n        console.log(currentQuestionIndex);\r\n        setNumberOfAnswered(numberOfAnswered);\r\n        displayQuestions();\r\n        if (nextQuestion === undefined) {\r\n            endGame();\r\n        } else {\r\n            displayQuestions();\r\n        }\r\n    }\r\n    const handleNextButtonClick = () => {\r\n        if (nextQuestion !== undefined) {\r\n            setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n            displayQuestions();\r\n        }\r\n    };\r\n    const handlePreviousButtonClick = () => {\r\n        if (previousQuestion == undefined) {\r\n            M.toast({\r\n                html: '이전 문제가 없습니다.',\r\n                classes: 'toast-invalid',\r\n                displayLength: 1500\r\n            });\r\n            displayQuestions();\r\n        }\r\n        else if (nextQuestion !== undefined) {\r\n            setCurrentQuestionIndex(currentQuestionIndex - 1);\r\n            displayQuestions();\r\n        }\r\n    };\r\n    const handleQuitButtonClick = () => {\r\n        if (window.confirm('나가시겠습니까?')) {\r\n            history.push('/Home');\r\n        }\r\n    };\r\n    const handleButtonClick = (e) => {\r\n        switch (e.target.id) {\r\n            case 'next-button':\r\n                handleNextButtonClick();\r\n                break;\r\n            case 'previous-button':\r\n                handlePreviousButtonClick();\r\n                break;\r\n            case 'quit-button':\r\n                handleQuitButtonClick();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        \r\n    };\r\n    const startTimer = () => {\r\n        const countDownTime = Date.now + 180000;\r\n        console.log(countDownTime);\r\n        setInterval(() => {\r\n            let now = new Date();\r\n            let distance = countDownTime - now;\r\n\r\n            let minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\r\n            let seconds = Math.floor(distance % (1000 * 60) / (1000));\r\n\r\n            if (distance < 0) {\r\n                clearInterval(interval);\r\n                setTime({\r\n                        minutes: 0,\r\n                        seconds: 0\r\n                }, () => {\r\n                    alert('퀴즈가 끝났습니다!');\r\n                    history.push('/Home');\r\n                });\r\n            } else {\r\n                setTime({\r\n                        minutes,\r\n                        seconds,\r\n                        distance\r\n                    }\r\n                )\r\n            }\r\n        }, 1000);\r\n    }\r\n    const handleDisableButton = () => {\r\n        if(currentQuestionIndex === 0 || currentQuestionIndex < 0) {\r\n            setPBDisabled(true);\r\n        }\r\n        else {\r\n            setPBDisabled(false);\r\n        }\r\n\r\n        if(nextQuestion === undefined || currentQuestionIndex + 1 === numberOfQuestions) {\r\n            setNBDisabled(true);\r\n        }\r\n        else {\r\n            setNBDisabled(false);\r\n        }\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <Helmet><title>Quiz Page</title></Helmet>\r\n            <div className = \"questions\">\r\n                <h2>오늘의 퀴즈</h2>\r\n                <div className = \"lifeline-container\">\r\n                    {/* <p>\r\n                        <span className = \"mdi mdi-clock-outline mdi-24px\"></span>\r\n                        <span className = \"lifeline\">5</span>\r\n                    </p>\r\n                    <p>\r\n                        <span className = \"mdi mdi-clock-outline mdi-24px\"></span>\r\n                        <span className = \"lifeline\">5</span>\r\n                    </p> */}\r\n                </div>\r\n                <div className = \"timer-container\">\r\n                    <p>\r\n                        <span className= \"left\" style={{float: 'left'}}>\r\n                            {currentQuestionIndex+1} of {numberOfQuestions}</span>\r\n                        <span className= \"right\">\r\n                                {time.minutes}:{time.seconds}\r\n                            <span  className=\"mdi mdi-clock-outline mdi-24px\"></span></span>\r\n                    </p>\r\n                </div>\r\n                <h5>{currentQuestion.question}</h5>\r\n                {console.log(currentQuestion)}\r\n                {console.log(currentQuestionIndex)}\r\n                {console.log(time.minutes)}\r\n                {console.log(time)}\r\n                <div className=\"options-container\">\r\n                    <p onClick={handleOptionClick} className=\"option\">{currentQuestion.optionA}</p>\r\n                    <p onClick={handleOptionClick} className=\"option\">{currentQuestion.optionB}</p>\r\n                </div>\r\n                <div className=\"options-container\">\r\n                    <p onClick={handleOptionClick} className=\"option\">{currentQuestion.optionC}</p>\r\n                    <p onClick={handleOptionClick} className=\"option\">{currentQuestion.optionD}</p>\r\n                </div>\r\n                <div className=\"button-container\">\r\n                    <button\r\n                        className = {classnames('', {'disable' : PBDisabled})}\r\n                        id=\"previous-button\"\r\n                        onClick={handleButtonClick}>\r\n                        이전\r\n                    </button>\r\n                    <button\r\n                        className = {classnames('', {'disable' : NBDisabled})}\r\n                        id=\"next-button\"\r\n                        onClick={handleButtonClick}>\r\n                        다음\r\n                    </button>\r\n                    <button id=\"quit-button\" onClick={handleButtonClick}>나가기</button>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n        \r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        quizStatus: state.quiz.status.quizStatus,\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        quizRequest: () => {\r\n            return dispatch(quizRequest());\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);"]},"metadata":{},"sourceType":"module"}