{"ast":null,"code":"/**\n * @fileOverview Interface for DAUM spell checker.\n */\nconst Entities = require('html-entities').AllHtmlEntities;\n\nconst request = require('request');\n\nconst split = require('./split-string').byLength;\n\nconst entities = new Entities();\nconst {\n  decode\n} = entities; // Parses attribute from server response.\n\nfunction getAttr(string, key) {\n  const found = string.indexOf(key);\n  const firstQuote = string.indexOf('\"', found + 1);\n  const secondQuote = string.indexOf('\"', firstQuote + 1);\n  return string.substr(firstQuote + 1, secondQuote - firstQuote - 1);\n} // Parses server response.\n\n\nfunction parseJSON(response) {\n  const typos = [];\n  let found = -1;\n\n  for (;;) {\n    found = response.indexOf('data-error-type', found + 1);\n\n    if (found === -1) {\n      break;\n    }\n\n    const end = response.indexOf('>', found + 1);\n    const line = response.substr(found, end - found);\n    const typo = {};\n    typo.type = decode(getAttr(line, 'data-error-type='));\n    typo.token = decode(getAttr(line, 'data-error-input='));\n    typo.suggestions = [decode(getAttr(line, 'data-error-output='))];\n    typo.context = decode(getAttr(line, 'data-error-context='));\n    const infoBegin = response.indexOf('<div>', found);\n    let infoEnd = response.indexOf('</div>', infoBegin + 1); // In case, info has another <div>.\n\n    const infoNextEnd = response.indexOf('</div>', infoEnd + 1);\n    const nextFound = response.indexOf('inner_spell', infoBegin);\n\n    if (infoNextEnd !== -1 && (nextFound === -1 || nextFound > infoNextEnd)) {\n      infoEnd = infoNextEnd;\n    }\n\n    typo.info = decode(response.substr(infoBegin, infoEnd + 6 - infoBegin)).replace(/\\t/g, '').replace(/<strong class[^>]*>[^>]*>\\n/gi, '').replace(/<br[^>]*>/gi, '\\n').replace(/<[^>]*>/g, '').replace(/\\n\\n\\n\\n\\n/g, '\\n(예)\\n').replace(/\\n\\n*$/g, '').replace(/^[ \\n][ \\n]*/g, '');\n    if (typo.info === '도움말이 없습니다.') delete typo.info;\n    typos.push(typo);\n  }\n\n  return typos;\n}\n\nconst DAUM_URL = 'https://dic.daum.net/grammar_checker.do';\nconst DAUM_MAX_CHARS = 1000; // Splits a long sentence, and makes spell check requests to the server.\n// `check` is called at each short sentence with the parsed JSON parameter.\n\nfunction spellCheck(sentence, timeout, check, end, error) {\n  if (sentence.length === 0) {\n    if (end !== null) {\n      end();\n    }\n\n    return;\n  }\n\n  const data = split(sentence, '.,\\n', DAUM_MAX_CHARS);\n  let count = data.length;\n\n  const getResponse = (err, response, body) => {\n    count -= 1;\n\n    if (!err && response.statusCode === 200) {\n      if (body.indexOf('=\"screen_out\">맞춤법 검사기 본문</h2>') === -1) {\n        console.error(`-- 한스펠 오류: 다음 서비스가 유효하지 않은 양식을 반환했습니다. (${DAUM_URL})`);\n        console.log(body);\n        if (error) error(err);\n      } else {\n        check(parseJSON(body));\n      }\n    } else {\n      console.error('-- 한스펠 오류: 다음 서버의 접속 오류로 일부 문장 교정에 실패했습니다.');\n      if (error) error(err);\n    }\n\n    if (count === 0 && end !== null) end();\n  };\n\n  data.forEach(part => request.post({\n    url: DAUM_URL,\n    timeout,\n    form: {\n      sentence: part\n    }\n  }, getResponse));\n}\n\nmodule.exports = spellCheck;","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Literacy-Improvement-Web/frontend/Literacy-Web/node_modules/hanspell/lib/daum-spell-check.js"],"names":["Entities","require","AllHtmlEntities","request","split","byLength","entities","decode","getAttr","string","key","found","indexOf","firstQuote","secondQuote","substr","parseJSON","response","typos","end","line","typo","type","token","suggestions","context","infoBegin","infoEnd","infoNextEnd","nextFound","info","replace","push","DAUM_URL","DAUM_MAX_CHARS","spellCheck","sentence","timeout","check","error","length","data","count","getResponse","err","body","statusCode","console","log","forEach","part","post","url","form","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileOverview Interface for DAUM spell checker.\n */\n\nconst Entities = require('html-entities').AllHtmlEntities;\nconst request = require('request');\n\nconst split = require('./split-string').byLength;\n\nconst entities = new Entities();\nconst { decode } = entities;\n\n// Parses attribute from server response.\nfunction getAttr(string, key) {\n  const found = string.indexOf(key);\n  const firstQuote = string.indexOf('\"', found + 1);\n  const secondQuote = string.indexOf('\"', firstQuote + 1);\n  return string.substr(firstQuote + 1, secondQuote - firstQuote - 1);\n}\n\n// Parses server response.\nfunction parseJSON(response) {\n  const typos = [];\n  let found = -1;\n\n  for (;;) {\n    found = response.indexOf('data-error-type', found + 1);\n    if (found === -1) {\n      break;\n    }\n\n    const end = response.indexOf('>', found + 1);\n    const line = response.substr(found, end - found);\n    const typo = {};\n\n    typo.type = decode(getAttr(line, 'data-error-type='));\n    typo.token = decode(getAttr(line, 'data-error-input='));\n    typo.suggestions = [decode(getAttr(line, 'data-error-output='))];\n    typo.context = decode(getAttr(line, 'data-error-context='));\n\n    const infoBegin = response.indexOf('<div>', found);\n    let infoEnd = response.indexOf('</div>', infoBegin + 1);\n    // In case, info has another <div>.\n    const infoNextEnd = response.indexOf('</div>', infoEnd + 1);\n    const nextFound = response.indexOf('inner_spell', infoBegin);\n    if (infoNextEnd !== -1 && (nextFound === -1 || nextFound > infoNextEnd)) {\n      infoEnd = infoNextEnd;\n    }\n\n    typo.info = decode(response.substr(infoBegin, infoEnd + 6 - infoBegin))\n      .replace(/\\t/g, '')\n      .replace(/<strong class[^>]*>[^>]*>\\n/gi, '')\n      .replace(/<br[^>]*>/gi, '\\n')\n      .replace(/<[^>]*>/g, '')\n      .replace(/\\n\\n\\n\\n\\n/g, '\\n(예)\\n')\n      .replace(/\\n\\n*$/g, '')\n      .replace(/^[ \\n][ \\n]*/g, '');\n\n    if (typo.info === '도움말이 없습니다.') delete typo.info;\n\n    typos.push(typo);\n  }\n\n  return typos;\n}\n\nconst DAUM_URL = 'https://dic.daum.net/grammar_checker.do';\nconst DAUM_MAX_CHARS = 1000;\n\n// Splits a long sentence, and makes spell check requests to the server.\n// `check` is called at each short sentence with the parsed JSON parameter.\nfunction spellCheck(sentence, timeout, check, end, error) {\n  if (sentence.length === 0) {\n    if (end !== null) {\n      end();\n    }\n    return;\n  }\n\n  const data = split(sentence, '.,\\n', DAUM_MAX_CHARS);\n  let count = data.length;\n\n  const getResponse = (err, response, body) => {\n    count -= 1;\n    if (!err && response.statusCode === 200) {\n      if (body.indexOf('=\"screen_out\">맞춤법 검사기 본문</h2>') === -1) {\n        console.error(\n          `-- 한스펠 오류: 다음 서비스가 유효하지 않은 양식을 반환했습니다. (${DAUM_URL})`,\n        );\n        console.log(body);\n        if (error) error(err);\n      } else {\n        check(parseJSON(body));\n      }\n    } else {\n      console.error(\n        '-- 한스펠 오류: 다음 서버의 접속 오류로 일부 문장 교정에 실패했습니다.',\n      );\n      if (error) error(err);\n    }\n    if (count === 0 && end !== null) end();\n  };\n\n  data.forEach((part) =>\n    request.post(\n      {\n        url: DAUM_URL,\n        timeout,\n        form: {\n          sentence: part,\n        },\n      },\n      getResponse,\n    ),\n  );\n}\n\nmodule.exports = spellCheck;\n"]},"metadata":{},"sourceType":"script"}