{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheolsoon\\\\Desktop\\\\Literacy-Improvement-Web\\\\frontend\\\\Literacy-Web\\\\src\\\\components\\\\login\\\\OAuthRedirectHandler.js\",\n    _s = $RefreshSig$();\n\n// 리다이렉트될 화면\n// OAuthRedirectHandeler.js\nimport React, { useEffect, useState } from \"react\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport { kakaoAuthRequest } from \"../../redux\";\nimport { useHistory } from \"react-router\"; //import Spinner from \"./Spinner\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction OAuthRedirectHandler({\n  kakaoAuthRequest,\n  AccessToken\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  useEffect(async () => {\n    await kakaoAuthRequest(code);\n  }); // 인가코드\n\n  let code = new URL(window.location.href).searchParams.get(\"code\");\n  console.log(code);\n\n  if (AccessToken !== \"INIT\") {\n    // 토큰이 받으면 home으로 이동\n    localStorage.setItem(\"token\", AccessToken); //예시로 로컬에 저장함\n\n    history.push(\"/Home\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"hello kakao\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n}\n\n_s(OAuthRedirectHandler, \"ttHHWC+EsJmhGbpqXwDwA2EruUw=\", false, function () {\n  return [useDispatch, useHistory];\n});\n\n_c = OAuthRedirectHandler;\n\nconst mapStateToProps = state => {\n  return {\n    AccessToken: state.kakaoAuth.status.AccessToken,\n    isLoggedIn: state.kakaoAuth.status.isLoggedIn\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    kakaoAuthRequest: code => {\n      return dispatch(kakaoAuthRequest(code));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OAuthRedirectHandler);\n\nvar _c;\n\n$RefreshReg$(_c, \"OAuthRedirectHandler\");","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Literacy-Improvement-Web/frontend/Literacy-Web/src/components/login/OAuthRedirectHandler.js"],"names":["React","useEffect","useState","connect","useSelector","useDispatch","kakaoAuthRequest","useHistory","OAuthRedirectHandler","AccessToken","dispatch","history","code","URL","window","location","href","searchParams","get","console","log","localStorage","setItem","push","mapStateToProps","state","kakaoAuth","status","isLoggedIn","mapDispatchToProps"],"mappings":";;;AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,UAAT,QAA2B,cAA3B,C,CAEA;;;;AAEA,SAASC,oBAAT,CAA8B;AAAEF,EAAAA,gBAAF;AAAoBG,EAAAA;AAApB,CAA9B,EAAiE;AAAA;;AAC/D,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAMM,OAAO,GAAGJ,UAAU,EAA1B;AAEAN,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAMK,gBAAgB,CAACM,IAAD,CAAtB;AACD,GAFQ,CAAT,CAJ+D,CAQ/D;;AACA,MAAIA,IAAI,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,QAAP,CAAgBC,IAAxB,EAA8BC,YAA9B,CAA2CC,GAA3C,CAA+C,MAA/C,CAAX;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;;AAEA,MAAIH,WAAW,KAAK,MAApB,EAA4B;AAC1B;AACAY,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8Bb,WAA9B,EAF0B,CAEkB;;AAC5CE,IAAAA,OAAO,CAACY,IAAR,CAAa,OAAb;AACD;;AAED,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAnBQf,oB;UACUH,W,EACDE,U;;;KAFTC,oB;;AAqBT,MAAMgB,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLhB,IAAAA,WAAW,EAAEgB,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBlB,WAD/B;AAELmB,IAAAA,UAAU,EAAEH,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBC;AAF9B,GAAP;AAID,CALD;;AAOA,MAAMC,kBAAkB,GAAInB,QAAD,IAAc;AACvC,SAAO;AACLJ,IAAAA,gBAAgB,EAAGM,IAAD,IAAU;AAC1B,aAAOF,QAAQ,CAACJ,gBAAgB,CAACM,IAAD,CAAjB,CAAf;AACD;AAHI,GAAP;AAKD,CAND;;AAOA,eAAeT,OAAO,CACpBqB,eADoB,EAEpBK,kBAFoB,CAAP,CAGbrB,oBAHa,CAAf","sourcesContent":["// 리다이렉트될 화면\r\n// OAuthRedirectHandeler.js\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { connect, useSelector, useDispatch } from \"react-redux\";\r\nimport { kakaoAuthRequest } from \"../../redux\";\r\nimport { useHistory } from \"react-router\";\r\n\r\n//import Spinner from \"./Spinner\";\r\n\r\nfunction OAuthRedirectHandler({ kakaoAuthRequest, AccessToken }) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(async () => {\r\n    await kakaoAuthRequest(code);\r\n  });\r\n\r\n  // 인가코드\r\n  let code = new URL(window.location.href).searchParams.get(\"code\");\r\n  console.log(code);\r\n\r\n  if (AccessToken !== \"INIT\") {\r\n    // 토큰이 받으면 home으로 이동\r\n    localStorage.setItem(\"token\", AccessToken); //예시로 로컬에 저장함\r\n    history.push(\"/Home\");\r\n  }\r\n\r\n  return <div>hello kakao</div>;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    AccessToken: state.kakaoAuth.status.AccessToken,\r\n    isLoggedIn: state.kakaoAuth.status.isLoggedIn,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    kakaoAuthRequest: (code) => {\r\n      return dispatch(kakaoAuthRequest(code));\r\n    },\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(OAuthRedirectHandler);\r\n"]},"metadata":{},"sourceType":"module"}