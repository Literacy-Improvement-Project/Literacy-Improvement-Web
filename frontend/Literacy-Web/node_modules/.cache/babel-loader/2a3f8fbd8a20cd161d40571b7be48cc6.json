{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheolsoon\\\\Desktop\\\\Literacy-Improvement-Web\\\\frontend\\\\Literacy-Web\\\\src\\\\components\\\\voiceRecognition\\\\VoiceRecognition.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport \"./VoiceRecognition.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function VoiceRecognition({}) {\n  _s();\n\n  const [stream, setStream] = useState();\n  const [media, setMedia] = useState();\n  const [onRec, setOnRec] = useState(true);\n  const [source, setSource] = useState();\n  const [analyser, setAnalyser] = useState();\n  const [audioUrl, setAudioUrl] = useState();\n  /* 녹음 시작 */\n\n  const onRecAudio = () => {\n    // 음원정보를 담은 노드를 생성하거나 음원을 실행또는 디코딩 시키는 일을 한다\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)(); // 자바스크립트를 통해 음원의 진행상태에 직접접근에 사용된다.\n\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\n    setAnalyser(analyser);\n\n    function makeSound(stream) {\n      // 내 컴퓨터의 마이크나 다른 소스를 통해 발생한 오디오 스트림의 정보를 보여준다.\n      const source = audioCtx.createMediaStreamSource(stream);\n      setSource(source); // AudioBufferSourceNode 연결\n\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n    } // 마이크 사용 권한 획득 후 녹음 시작\n\n\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      // 3분(180초) 지나면 자동으로 음성 저장 및 녹음 중지\n      if (e.playbackTime > 180) {\n        stream.getAudioTracks().forEach(function (track) {\n          track.stop();\n        });\n        mediaRecorder.stop(); // 메서드가 호출 된 노드 연결 해제\n\n        analyser.disconnect();\n        audioCtx.createMediaStreamSource(stream).disconnect();\n\n        mediaRecorder.ondataavailable = function (e) {\n          setAudioUrl(e.data);\n          setOnRec(true);\n        };\n      } else {\n        setOnRec(false);\n      }\n    });\n  };\n  /* 녹음 중지 */\n\n\n  const offRecAudio = () => {\n    // dataavailable 이벤트로 Blob 데이터에 대한 응답을 받을 수 있음\n    media.ondataavailable = function (e) {\n      setAudioUrl(e.data);\n      setOnRec(true);\n    }; // 모든 트랙에서 stop()을 호출해 오디오 스트림을 정지\n\n\n    stream.getAudioTracks().forEach(function (track) {\n      track.stop();\n    }); // 미디어 캡처 중지\n\n    media.stop(); // 메서드가 호출 된 노드 연결 해제\n\n    analyser.disconnect();\n    source.disconnect();\n  };\n  /*  녹음 종료 시 녹음 파일 생성 */\n\n\n  const onSubmitAudioFile = useCallback(() => {\n    if (audioUrl) {\n      console.log(URL.createObjectURL(audioUrl)); // 출력된 링크에서 녹음된 오디오 확인 가능\n    } // File 생성자를 사용해 파일로 변환\n\n\n    const sound = new File([audioUrl], \"soundBlob\", {\n      lastModified: new Date().getTime(),\n      type: \"audio\"\n    });\n    console.log(sound); // File 정보 출력\n  }, [audioUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"title\",\n      children: \" \\uC74C\\uC131\\uC73C\\uB85C \\uAC80\\uC0C9\\uD558\\uAE30 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          onClick: onRec ? onRecAudio : offRecAudio,\n          children: \"\\uB179\\uC74C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          onClick: onSubmitAudioFile,\n          children: \"\\uACB0\\uACFC\\uD655\\uC778\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VoiceRecognition, \"Ym7lBIG9wpNpsfr11t0+46zJZ8A=\");\n\n_c = VoiceRecognition;\n\nvar _c;\n\n$RefreshReg$(_c, \"VoiceRecognition\");","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Literacy-Improvement-Web/frontend/Literacy-Web/src/components/voiceRecognition/VoiceRecognition.js"],"names":["React","useState","Button","TextField","Grid","Link","VoiceRecognition","stream","setStream","media","setMedia","onRec","setOnRec","source","setSource","analyser","setAnalyser","audioUrl","setAudioUrl","onRecAudio","audioCtx","window","AudioContext","webkitAudioContext","createScriptProcessor","makeSound","createMediaStreamSource","connect","destination","navigator","mediaDevices","getUserMedia","audio","then","e","playbackTime","getAudioTracks","forEach","track","stop","mediaRecorder","disconnect","ondataavailable","data","offRecAudio","onSubmitAudioFile","useCallback","console","log","URL","createObjectURL","sound","File","lastModified","Date","getTime","type"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport \"./VoiceRecognition.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function VoiceRecognition({}) {\r\n  const [stream, setStream] = useState();\r\n  const [media, setMedia] = useState();\r\n  const [onRec, setOnRec] = useState(true);\r\n  const [source, setSource] = useState();\r\n  const [analyser, setAnalyser] = useState();\r\n  const [audioUrl, setAudioUrl] = useState();\r\n\r\n  /* 녹음 시작 */\r\n  const onRecAudio = () => {\r\n    // 음원정보를 담은 노드를 생성하거나 음원을 실행또는 디코딩 시키는 일을 한다\r\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n    // 자바스크립트를 통해 음원의 진행상태에 직접접근에 사용된다.\r\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\r\n    setAnalyser(analyser);\r\n\r\n    function makeSound(stream) {\r\n      // 내 컴퓨터의 마이크나 다른 소스를 통해 발생한 오디오 스트림의 정보를 보여준다.\r\n      const source = audioCtx.createMediaStreamSource(stream);\r\n      setSource(source);\r\n\r\n      // AudioBufferSourceNode 연결\r\n      source.connect(analyser);\r\n      analyser.connect(audioCtx.destination);\r\n    }\r\n\r\n    // 마이크 사용 권한 획득 후 녹음 시작\r\n    navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\r\n      // 3분(180초) 지나면 자동으로 음성 저장 및 녹음 중지\r\n      if (e.playbackTime > 180) {\r\n        stream.getAudioTracks().forEach(function (track) {\r\n          track.stop();\r\n        });\r\n        mediaRecorder.stop();\r\n        // 메서드가 호출 된 노드 연결 해제\r\n        analyser.disconnect();\r\n        audioCtx.createMediaStreamSource(stream).disconnect();\r\n\r\n        mediaRecorder.ondataavailable = function (e) {\r\n          setAudioUrl(e.data);\r\n          setOnRec(true);\r\n        };\r\n      } else {\r\n        setOnRec(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  /* 녹음 중지 */\r\n  const offRecAudio = () => {\r\n    // dataavailable 이벤트로 Blob 데이터에 대한 응답을 받을 수 있음\r\n    media.ondataavailable = function (e) {\r\n      setAudioUrl(e.data);\r\n      setOnRec(true);\r\n    };\r\n\r\n    // 모든 트랙에서 stop()을 호출해 오디오 스트림을 정지\r\n    stream.getAudioTracks().forEach(function (track) {\r\n      track.stop();\r\n    });\r\n\r\n    // 미디어 캡처 중지\r\n    media.stop();\r\n\r\n    // 메서드가 호출 된 노드 연결 해제\r\n    analyser.disconnect();\r\n    source.disconnect();\r\n  };\r\n\r\n  /*  녹음 종료 시 녹음 파일 생성 */\r\n  const onSubmitAudioFile = useCallback(() => {\r\n    if (audioUrl) {\r\n      console.log(URL.createObjectURL(audioUrl)); // 출력된 링크에서 녹음된 오디오 확인 가능\r\n    }\r\n    // File 생성자를 사용해 파일로 변환\r\n    const sound = new File([audioUrl], \"soundBlob\", {\r\n      lastModified: new Date().getTime(),\r\n      type: \"audio\",\r\n    });\r\n    console.log(sound); // File 정보 출력\r\n  }, [audioUrl]);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <h3 className=\"title\"> 음성으로 검색하기 </h3>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={6}>\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            onClick={onRec ? onRecAudio : offRecAudio}\r\n          >\r\n            녹음\r\n          </Button>\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            onClick={onSubmitAudioFile}\r\n          >\r\n            결과확인\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={6}></Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}