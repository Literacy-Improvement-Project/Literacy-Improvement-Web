{"ast":null,"code":"/**\n * @fileOverview Helper functions to split long string by word count and by\n *               upper bound length and separator.\n */\n// Returns the lowest index of any characters of separator found in string.\nfunction indexOfAny(string, separator, from) {\n  const founds = separator.split('').map(s => string.indexOf(s, from)).filter(s => s > -1).sort((a, b) => a - b);\n\n  if (founds.length === 0) {\n    return -1;\n  }\n\n  return founds[0];\n} // Splits string in word-wrapped manner by length.\n\n\nfunction byLength(string, separator, limit) {\n  const splitted = [];\n  let found = -1;\n  let lastFound = -1;\n  let lastSplitted = -1;\n\n  for (;;) {\n    found = indexOfAny(string, separator, lastFound + 1);\n\n    if (found === -1) {\n      break;\n    }\n\n    if (found - lastSplitted > limit) {\n      splitted.push(string.substr(lastSplitted + 1, lastFound - lastSplitted));\n      lastSplitted = lastFound;\n    }\n\n    lastFound = found;\n  }\n\n  if (lastSplitted + 1 !== string.length) {\n    if (string.length - lastSplitted - 1 <= limit) {\n      splitted.push(string.substr(lastSplitted + 1));\n    } else {\n      if (lastSplitted !== lastFound) {\n        splitted.push(string.substr(lastSplitted + 1, lastFound - lastSplitted));\n      }\n\n      splitted.push(string.substr(lastFound + 1));\n    }\n  }\n\n  return splitted;\n} // Splits string in word-wrapped manner by word count.\n\n\nfunction byWordCount(string, limit) {\n  const splitted = [];\n  let found = -1;\n  let lastFound = -1;\n  let lastSplitted = -1;\n  let wordCount = 0;\n\n  for (;;) {\n    found = indexOfAny(string, ' \\n\\t', lastFound + 1);\n\n    if (found === -1) {\n      break;\n    }\n\n    if (found - lastFound === 1) {\n      lastFound = found;\n    } else {\n      wordCount += 1;\n\n      if (wordCount >= limit) {\n        splitted.push(string.substr(lastSplitted + 1, found - lastSplitted));\n        wordCount = 0;\n        lastSplitted = found;\n      }\n\n      lastFound = found;\n    }\n  }\n\n  if (lastSplitted + 1 !== string.length) {\n    splitted.push(string.substr(lastSplitted + 1));\n  }\n\n  return splitted;\n}\n\nmodule.exports = {\n  byLength,\n  byWordCount,\n  indexOfAny\n};","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Literacy-Improvement-Web/frontend/Literacy-Web/node_modules/hanspell/lib/split-string.js"],"names":["indexOfAny","string","separator","from","founds","split","map","s","indexOf","filter","sort","a","b","length","byLength","limit","splitted","found","lastFound","lastSplitted","push","substr","byWordCount","wordCount","module","exports"],"mappings":"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","sourcesContent":["/**\n * @fileOverview Helper functions to split long string by word count and by\n *               upper bound length and separator.\n */\n\n// Returns the lowest index of any characters of separator found in string.\nfunction indexOfAny(string, separator, from) {\n  const founds = separator\n    .split('')\n    .map((s) => string.indexOf(s, from))\n    .filter((s) => s > -1)\n    .sort((a, b) => a - b);\n\n  if (founds.length === 0) {\n    return -1;\n  }\n  return founds[0];\n}\n\n// Splits string in word-wrapped manner by length.\nfunction byLength(string, separator, limit) {\n  const splitted = [];\n  let found = -1;\n  let lastFound = -1;\n  let lastSplitted = -1;\n\n  for (;;) {\n    found = indexOfAny(string, separator, lastFound + 1);\n    if (found === -1) {\n      break;\n    }\n    if (found - lastSplitted > limit) {\n      splitted.push(string.substr(lastSplitted + 1, lastFound - lastSplitted));\n      lastSplitted = lastFound;\n    }\n    lastFound = found;\n  }\n\n  if (lastSplitted + 1 !== string.length) {\n    if (string.length - lastSplitted - 1 <= limit) {\n      splitted.push(string.substr(lastSplitted + 1));\n    } else {\n      if (lastSplitted !== lastFound) {\n        splitted.push(\n          string.substr(lastSplitted + 1, lastFound - lastSplitted),\n        );\n      }\n      splitted.push(string.substr(lastFound + 1));\n    }\n  }\n\n  return splitted;\n}\n\n// Splits string in word-wrapped manner by word count.\nfunction byWordCount(string, limit) {\n  const splitted = [];\n  let found = -1;\n  let lastFound = -1;\n  let lastSplitted = -1;\n  let wordCount = 0;\n\n  for (;;) {\n    found = indexOfAny(string, ' \\n\\t', lastFound + 1);\n    if (found === -1) {\n      break;\n    }\n    if (found - lastFound === 1) {\n      lastFound = found;\n    } else {\n      wordCount += 1;\n      if (wordCount >= limit) {\n        splitted.push(string.substr(lastSplitted + 1, found - lastSplitted));\n        wordCount = 0;\n        lastSplitted = found;\n      }\n      lastFound = found;\n    }\n  }\n\n  if (lastSplitted + 1 !== string.length) {\n    splitted.push(string.substr(lastSplitted + 1));\n  }\n\n  return splitted;\n}\n\nmodule.exports = { byLength, byWordCount, indexOfAny };\n"]},"metadata":{},"sourceType":"script"}