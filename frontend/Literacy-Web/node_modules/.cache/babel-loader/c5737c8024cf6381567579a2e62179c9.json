{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cheolsoon\\\\Desktop\\\\Literacy-Improvement-Web\\\\frontend\\\\Literacy-Web\\\\src\\\\components\\\\voiceRecognition\\\\VoiceRecognition.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from \"react\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport \"./VoiceRecognition.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Link } from \"react-router-dom\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function VoiceRecognition({}) {\n  _s();\n\n  const [stream, setStream] = useState();\n  const [media, setMedia] = useState();\n  const [onRec, setOnRec] = useState(true);\n  const [isCheckRec, setIsCheckRec] = useState(true);\n  const [source, setSource] = useState();\n  const [analyser, setAnalyser] = useState();\n  const [audioUrl, setAudioUrl] = useState();\n  let soundFile;\n\n  const onRecAudio = () => {\n    // 음원정보를 담은 노드를 생성하거나 음원을 실행또는 디코딩 시키는 일을 한다\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)(); // 자바스크립트를 통해 음원의 진행상태에 직접접근에 사용된다.\n\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\n    setAnalyser(analyser);\n\n    function makeSound(stream) {\n      // 내 컴퓨터의 마이크나 다른 소스를 통해 발생한 오디오 스트림의 정보를 보여준다.\n      const source = audioCtx.createMediaStreamSource(stream);\n      setSource(source);\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n    } // 마이크 사용 권한 획득\n\n\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.start();\n      setStream(stream);\n      setMedia(mediaRecorder);\n      makeSound(stream);\n\n      analyser.onaudioprocess = function (e) {\n        // 3분(180초) 지나면 자동으로 음성 저장 및 녹음 중지\n        if (e.playbackTime > 180) {\n          stream.getAudioTracks().forEach(function (track) {\n            track.stop();\n          });\n          mediaRecorder.stop(); // 메서드가 호출 된 노드 연결 해제\n\n          analyser.disconnect();\n          audioCtx.createMediaStreamSource(stream).disconnect();\n\n          mediaRecorder.ondataavailable = function (e) {\n            setAudioUrl(e.data);\n            setOnRec(true);\n          };\n        } else {\n          setOnRec(false);\n        }\n      };\n    });\n  }; // 사용자가 음성 녹음을 중지했을 때\n\n\n  const offRecAudio = () => {\n    // dataavailable 이벤트로 Blob 데이터에 대한 응답을 받을 수 있음\n    media.ondataavailable = function (e) {\n      setAudioUrl(e.data);\n      setOnRec(true);\n    }; // 모든 트랙에서 stop()을 호출해 오디오 스트림을 정지\n\n\n    stream.getAudioTracks().forEach(function (track) {\n      track.stop();\n    }); // 미디어 캡처 중지\n\n    media.stop(); // 메서드가 호출 된 노드 연결 해제\n\n    analyser.disconnect();\n    source.disconnect();\n  };\n\n  const onSubmitAudioFile = useCallback(() => {\n    if (audioUrl) {\n      console.log(URL.createObjectURL(audioUrl)); // 출력된 링크에서 녹음된 오디오 확인 가능\n    } // File 생성자를 사용해 파일로 변환\n\n\n    const sound = new File([audioUrl], \"soundBlob\", {\n      lastModified: new Date().getTime(),\n      type: \"audio\"\n    });\n    soundFile = sound; //console.log(sound); // File 정보 출력\n\n    console.log(soundFile); // File 정보 출력\n\n    setIsCheckRec(false);\n  }, [audioUrl]);\n\n  const onSearchAudioFile = () => {};\n\n  const onRecAudioButton = /*#__PURE__*/_jsxDEV(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: onRecAudio,\n    children: \"\\uB179\\uC74C\\uC2DC\\uC791\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n\n  const offRecAudioButton = /*#__PURE__*/_jsxDEV(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: offRecAudio,\n    children: \"\\uB179\\uC74C\\uC885\\uB8CC\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n\n  const checkRec = /*#__PURE__*/_jsxDEV(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    onClick: onSubmitAudioFile,\n    children: \"\\uACB0\\uACFC\\uD655\\uC778\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n\n  const checkedRec = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        onClick: onSubmitAudioFile,\n        children: \"\\uACB0\\uACFC\\uD655\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: audioUrl ? /*#__PURE__*/_jsxDEV(ReactAudioPlayer, {\n        src: URL.createObjectURL(audioUrl),\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this) : undefined\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"header\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"title\",\n      children: \" \\uC74C\\uC131\\uC73C\\uB85C \\uAC80\\uC0C9\\uD558\\uAE30 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: onRec ? onRecAudioButton : offRecAudioButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: isCheckRec ? checkRec : checkedRec\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          variant: \"contained\",\n          onClick: onSearchAudioFile,\n          children: \"\\uAC80\\uC0C9\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VoiceRecognition, \"zlQGpv9gTS2oSuCAbn+l4P/BwlE=\");\n\n_c = VoiceRecognition;\n\nvar _c;\n\n$RefreshReg$(_c, \"VoiceRecognition\");","map":{"version":3,"sources":["C:/Users/Cheolsoon/Desktop/Literacy-Improvement-Web/frontend/Literacy-Web/src/components/voiceRecognition/VoiceRecognition.js"],"names":["React","useState","useCallback","Button","TextField","Grid","Link","ReactAudioPlayer","VoiceRecognition","stream","setStream","media","setMedia","onRec","setOnRec","isCheckRec","setIsCheckRec","source","setSource","analyser","setAnalyser","audioUrl","setAudioUrl","soundFile","onRecAudio","audioCtx","window","AudioContext","webkitAudioContext","createScriptProcessor","makeSound","createMediaStreamSource","connect","destination","navigator","mediaDevices","getUserMedia","audio","then","mediaRecorder","MediaRecorder","start","onaudioprocess","e","playbackTime","getAudioTracks","forEach","track","stop","disconnect","ondataavailable","data","offRecAudio","onSubmitAudioFile","console","log","URL","createObjectURL","sound","File","lastModified","Date","getTime","type","onSearchAudioFile","onRecAudioButton","offRecAudioButton","checkRec","checkedRec","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport \"./VoiceRecognition.css\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport ReactAudioPlayer from \"react-audio-player\";\r\n\r\nexport default function VoiceRecognition({}) {\r\n  const [stream, setStream] = useState();\r\n  const [media, setMedia] = useState();\r\n  const [onRec, setOnRec] = useState(true);\r\n  const [isCheckRec, setIsCheckRec] = useState(true);\r\n  const [source, setSource] = useState();\r\n  const [analyser, setAnalyser] = useState();\r\n  const [audioUrl, setAudioUrl] = useState();\r\n\r\n  let soundFile;\r\n\r\n  const onRecAudio = () => {\r\n    // 음원정보를 담은 노드를 생성하거나 음원을 실행또는 디코딩 시키는 일을 한다\r\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n    // 자바스크립트를 통해 음원의 진행상태에 직접접근에 사용된다.\r\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\r\n    setAnalyser(analyser);\r\n\r\n    function makeSound(stream) {\r\n      // 내 컴퓨터의 마이크나 다른 소스를 통해 발생한 오디오 스트림의 정보를 보여준다.\r\n      const source = audioCtx.createMediaStreamSource(stream);\r\n      setSource(source);\r\n      source.connect(analyser);\r\n      analyser.connect(audioCtx.destination);\r\n    }\r\n    // 마이크 사용 권한 획득\r\n    navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\r\n      const mediaRecorder = new MediaRecorder(stream);\r\n      mediaRecorder.start();\r\n      setStream(stream);\r\n      setMedia(mediaRecorder);\r\n      makeSound(stream);\r\n\r\n      analyser.onaudioprocess = function (e) {\r\n        // 3분(180초) 지나면 자동으로 음성 저장 및 녹음 중지\r\n        if (e.playbackTime > 180) {\r\n          stream.getAudioTracks().forEach(function (track) {\r\n            track.stop();\r\n          });\r\n          mediaRecorder.stop();\r\n          // 메서드가 호출 된 노드 연결 해제\r\n          analyser.disconnect();\r\n          audioCtx.createMediaStreamSource(stream).disconnect();\r\n\r\n          mediaRecorder.ondataavailable = function (e) {\r\n            setAudioUrl(e.data);\r\n            setOnRec(true);\r\n          };\r\n        } else {\r\n          setOnRec(false);\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  // 사용자가 음성 녹음을 중지했을 때\r\n  const offRecAudio = () => {\r\n    // dataavailable 이벤트로 Blob 데이터에 대한 응답을 받을 수 있음\r\n    media.ondataavailable = function (e) {\r\n      setAudioUrl(e.data);\r\n      setOnRec(true);\r\n    };\r\n\r\n    // 모든 트랙에서 stop()을 호출해 오디오 스트림을 정지\r\n    stream.getAudioTracks().forEach(function (track) {\r\n      track.stop();\r\n    });\r\n\r\n    // 미디어 캡처 중지\r\n    media.stop();\r\n    // 메서드가 호출 된 노드 연결 해제\r\n    analyser.disconnect();\r\n    source.disconnect();\r\n  };\r\n\r\n  const onSubmitAudioFile = useCallback(() => {\r\n    if (audioUrl) {\r\n      console.log(URL.createObjectURL(audioUrl)); // 출력된 링크에서 녹음된 오디오 확인 가능\r\n    }\r\n    // File 생성자를 사용해 파일로 변환\r\n    const sound = new File([audioUrl], \"soundBlob\", {\r\n      lastModified: new Date().getTime(),\r\n      type: \"audio\",\r\n    });\r\n    soundFile = sound;\r\n    //console.log(sound); // File 정보 출력\r\n    console.log(soundFile); // File 정보 출력\r\n    setIsCheckRec(false);\r\n  }, [audioUrl]);\r\n\r\n  const onSearchAudioFile = () => {};\r\n\r\n  const onRecAudioButton = (\r\n    <Button color=\"primary\" variant=\"contained\" onClick={onRecAudio}>\r\n      녹음시작\r\n    </Button>\r\n  );\r\n  const offRecAudioButton = (\r\n    <Button color=\"primary\" variant=\"contained\" onClick={offRecAudio}>\r\n      녹음종료\r\n    </Button>\r\n  );\r\n\r\n  const checkRec = (\r\n    <Button color=\"primary\" variant=\"contained\" onClick={onSubmitAudioFile}>\r\n      결과확인\r\n    </Button>\r\n  );\r\n  const checkedRec = (\r\n    <div>\r\n      <Grid item xs={12}>\r\n        <Button color=\"primary\" variant=\"contained\" onClick={onSubmitAudioFile}>\r\n          결과확인\r\n        </Button>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        {audioUrl ? (\r\n          <ReactAudioPlayer src={URL.createObjectURL(audioUrl)} controls />\r\n        ) : undefined}\r\n      </Grid>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <h3 className=\"title\"> 음성으로 검색하기 </h3>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          {onRec ? onRecAudioButton : offRecAudioButton}\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {isCheckRec ? checkRec : checkedRec}\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            onClick={onSearchAudioFile}\r\n          >\r\n            검색하기\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}